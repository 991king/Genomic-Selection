}
}
mean(mymat_IT)
#Single ENV DS with NA [CV0]:
{
env <- DS # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_DS <- matrix(nrow = rep, ncol = 1)
prefix_DS <- paste(colnames(Pheno_rust)[DS],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_DS_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_DS, verbose = F)
mymat_DS[i,] <- cor(Pheno_rust[tst,DS], fm_DS_CV1$yHat[tst])
}
}
mean(mymat_DS)
#Single ENV Index with NA [CV0]:
{
env <- Index # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_Index <- matrix(nrow = rep, ncol = 1)
prefix_Index <- paste(colnames(Pheno_rust)[Index],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_Index_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_Index, verbose = F)
mymat_Index[i,] <- cor(Pheno_rust[tst,Index], fm_Index_CV1$yHat[tst])
}
}
mean(mymat_Index)
GBLUP_singlENV <- cbind(mymat_R19, mymat_AUDPC, mymat_IF, mymat_IT, mymat_DS, mymat_Index)
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
#traits:
R19 <- 3 # choose any number in 1:ncol(Pheno_rust)
AUDPC <- 5
IF <- 7
IT <- 8
DS <- 9
Index <- 14
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 3", colNames = F)) #G matrix
prefix <- paste(colnames(Pheno_rust)[R19],"_",sep="")
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
#Single ENV R19 with NA [CV0]:
{
env <- R19 # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_R19 <- matrix(nrow = rep, ncol = 1)
prefix_R19 <- paste(colnames(Pheno_rust)[R19],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_R19_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_R19, verbose = F)
mymat_R19[i,] <- cor(Pheno_rust[tst,R19], fm_R19_CV1$yHat[tst])
}
}
mean(mymat_R19)
#Single ENV AUDPC with NA [CV0]:
{
env <- AUDPC # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_AUDPC <- matrix(nrow = rep, ncol = 1)
prefix_AUDPC <- paste(colnames(Pheno_rust)[AUDPC],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_AUDPC_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_AUDPC, verbose = F)
mymat_AUDPC[i,] <- cor(Pheno_rust[tst,AUDPC], fm_AUDPC_CV1$yHat[tst])
}
}
mean(mymat_AUDPC)
#Single ENV IF with NA [CV0]:
{
env <- IF # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_IF <- matrix(nrow = rep, ncol = 1)
prefix_IF <- paste(colnames(Pheno_rust)[IF],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_IF_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_IF, verbose = F)
mymat_IF[i,] <- cor(Pheno_rust[tst,IF], fm_IF_CV1$yHat[tst])
}
}
mean(mymat_IF)
#Single ENV IT with NA [CV0]:
{
env <- IT # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_IT <- matrix(nrow = rep, ncol = 1)
prefix_IT <- paste(colnames(Pheno_rust)[IT],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_IT_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_IT, verbose = F)
mymat_IT[i,] <- cor(Pheno_rust[tst,IT], fm_IT_CV1$yHat[tst])
}
}
mean(mymat_IT)
#Single ENV DS with NA [CV0]:
{
env <- DS # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_DS <- matrix(nrow = rep, ncol = 1)
prefix_DS <- paste(colnames(Pheno_rust)[DS],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_DS_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_DS, verbose = F)
mymat_DS[i,] <- cor(Pheno_rust[tst,DS], fm_DS_CV1$yHat[tst])
}
}
mean(mymat_DS)
#Single ENV Index with NA [CV0]:
{
env <- Index # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_Index <- matrix(nrow = rep, ncol = 1)
prefix_Index <- paste(colnames(Pheno_rust)[Index],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_Index_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_Index, verbose = F)
mymat_Index[i,] <- cor(Pheno_rust[tst,Index], fm_Index_CV1$yHat[tst])
}
}
mean(mymat_Index)
GBLUP_singlENV <- cbind(mymat_R19, mymat_AUDPC, mymat_IF, mymat_IT, mymat_DS, mymat_Index)
Rall_field <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R_all",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_F
"numeric", #GDD_P
"numeric", #Biom_pl_g
"numeric", #yield_pl_g
"numeric", #Rust
"numeric", #Asco
"numeric" #Oidio
))
library(readxl)
library(openxlsx)
library(metan)
library(ggstatsplot)
library(tidyverse)
library(GGEBiplots)
library(multcompView)
Rall_field <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R_all",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_F
"numeric", #GDD_P
"numeric", #Biom_pl_g
"numeric", #yield_pl_g
"numeric", #Rust
"numeric", #Asco
"numeric" #Oidio
))
View(Rall_field)
Rall_field$ENV <- as.factor(Rall_field$ENV)
Rall_field$REP <- as.factor(Rall_field$REP)
Rall_field$BLOCK <- as.factor(Rall_field$BLOCK)
Rall_field$ROW <- as.factor(Rall_field$ROW)
Rall_field$Material <- as.factor(Rall_field$Material)
Rall_field$Species <- as.factor(Rall_field$Species)
Rall_field$Structure <- as.factor(Rall_field$Structure)
Rall_field$GEN <- as.factor(Rall_field$GEN)
res_ind <- waasb(Rall_field,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
BLOCK = BLOCK,
mresp = "l",
verbose = FALSE)
res_ind <- waasb(Rall_field,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
block = BLOCK,
mresp = "l",
verbose = FALSE)
blup_indexes(res_ind)
model_indexes <- blup_indexes(res_ind)
gmd(model_indexes)
BLUP_field <- gmd(model_indexes)
BLUP_field
class(BLUP_field)
write.xlsx(BLUP_field, "BLUP_field.xlsx")
write.xlsx(BLUP_field, "BLUP_field2.xlsx")
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
View(Pheno_rust)
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
View(Pheno_rust)
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
View(Rall_field)
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320) # convert matrix to numeric 2
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=16, nrow=320) # convert matrix to numeric 2
View(Pheno_rust)
#traits:
R19 <- 3 # choose any number in 1:ncol(Pheno_rust)
AUDPC <- 5
IF <- 7
IT <- 8
DS <- 9
Index <- 14
Rust <- 16
#Single ENV Rust with NA [CV0]:
{
env <- Rust # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(as.matrix(Y))
percTST<-0.1
nTST <- round(percTST*n)
rep = 50
mymat_Rust <- matrix(nrow = rep, ncol = 1)
prefix_Rust <- paste(colnames(Pheno_rust)[Rust],"_",sep="")
for (i in 1:rep) {
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst]<-NA
fm_Rust_CV1 <- BGLR(y=YNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix_Rust, verbose = F)
mymat_Rust[i,] <- cor(Pheno_rust[tst,Rust], fm_Rust_CV1$yHat[tst])
}
}
mean(mymat_Rust)
get_model_data(res_ind, what = "BLUPg")
get_model_data(res_ind, what = "BLUPgen")
res_ind$Rust$BLUPgen
res_ind$Rust$BLUPint
res_ind$Rust$BLUPenv
res_ind$Rust$MeansGxE
res_ind$Rust$LRT
res_ind$Rust$ESTIMATES
model_indexes$Rust
BLUP_field
DArT <- as.matrix(read.table("Dart.txt", header = T))
DArT[DArT == 0] <- -1 #change 0 to -1
DArT_rust <- DArT[-c(288, 294, 300, 320, 325), ] #Esta
library(bcv)
DArT_rust_SVDI <-
impute.svd(DArT_rust, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_rust_SVDI <- as.matrix(read.table("DArT_noNA_SVDmethod.txt",header = T))
Pheno_rust_df <- as.data.frame(Pheno_rust)
head(Pheno_rust_df)
#creating a dataset for Rust (3fields)
nds.no_noise.DS <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_rust_SVDI,
phenotypes = Pheno_rust_df$V16)
#Ahora voy a hacer lo mismo con GROAN intentando 50 rep. de 10 fold cross-validation:
library(GROAN)
#creating a dataset for Rust (3fields)
nds.no_noise.DS <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_rust_SVDI,
phenotypes = Pheno_rust_df$V16)
#creating a dataset for Rust (3fields)
Pheno_rust_df$V16 <- as.numeric(Pheno_rust_df$V16)
nds.no_noise.DS <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_rust_SVDI,
phenotypes = Pheno_rust_df$V16)
DArT_rust_SVDI
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T)) #load phenotypes
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric) #convert matrix to numeric
Pheno_rust <- matrix(data=Pheno_rust, ncol=16, nrow=320) # convert matrix to numeric 2
Pheno_rust[,16]
nds.no_noise.DS <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_rust_SVDI,
phenotypes = Pheno_rust[,16])
View(DArT_rust_SVDI)
DArT <- as.matrix(read.table("DArT.txt", header = T))
DArT[DArT == 1] <- 2 #change 1 to 2
DArT_GROAN <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_GROAN_SVDI <-
impute.svd(DArT_GROAN, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_GROAN_SVDI[DArT_GROAN_SVDI >= 1.5] <- 2
DArT_GROAN_SVDI[DArT_GROAN_SVDI <= 0.5] <- 0
DArT_GROAN_SVDI[DArT_GROAN_SVDI > 0.5 & DArT_GROAN_SVDI < 1.5]<- 1
nds.no_noise.Rust <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust[,16])
#ahora voy a hacer un wb que incluya los cuatro regresores más usados: rrBLUP, GBLUP, BL y RKHS
#sabiendo que FAI2 es el mejor predictor para DS2019, ahora voy a ver qué modelo es mejor:
wb4 = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = F,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = F, saveExtraData = F,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
wb5 = addRegressor(
#the Workbench to be updater
wb4,
#the new regressor
regressor = phenoRegressor.BGLR, regressor.name = 'Bayesian Lasso',
#regressor-specific parameters
type = 'BL'
)
print(wb5)
res.Rust <- GROAN.run(nds.no_noise.Rust, wb5)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
dim(Pheno_rust)
dim(DArT_rust_SVDI)
dim(myG_rust)
#Create others dataset:
#I_cc_FAI_LP
nds.no_noise.FAI1<- createNoisyDataset(
name = 'PEA FAI, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$I_cc_FAI_LP)
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$AUDPC)
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
dim(Pheno_rust)
Pheno_rust_df <- as.data.frame(Pheno_rust)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$AUDPC)
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$AUDPC)
Pheno_rust_df$IF <- as.numeric(Pheno_rust_df$IF)
nds.no_noise.IF<- createNoisyDataset(
name = 'IF, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$IF)
Pheno_rust_df$IT <- as.numeric(Pheno_rust_df$IT)
nds.no_noise.IT<- createNoisyDataset(
name = 'IT, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$IT)
Pheno_rust_df$DS <- as.numeric(Pheno_rust_df$DS)
nds.no_noise.DS<- createNoisyDataset(
name = 'DS, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$DS)
Pheno_rust_df$R19 <- as.numeric(Pheno_rust_df$R19)
nds.no_noise.R19<- createNoisyDataset(
name = 'R19, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$R19)
Pheno_rust_df$I_cc_FAI <- as.numeric(Pheno_rust_df$I_cc_FAI)
nds.no_noise.I_cc_FAI<- createNoisyDataset(
name = 'I_cc_FAI, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$I_cc_FAI)
nds.no_noise.Index <- createNoisyDataset(
name = 'I_cc_FAI, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$I_cc_FAI)
#creating a dataset for Rust (3fields)
Pheno_rust_df$Rust <- as.numeric(Pheno_rust_df$Rust)
nds.no_noise.Rust <- createNoisyDataset(
name = 'PEA DS, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$Rust)
plotResult(res.Rust)
res.Rust %>%
group_by(regressor) %>%
summarise("meanPA" = mean(pearson))
res.AUDPC.field = GROAN.run(nds = nds.no_noise.AUDPC, wb = wb5, nds.test = nds.no_noise.R19)
print(res.AUDPC.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.IF.field = GROAN.run(nds = nds.no_noise.IF, wb = wb5, nds.test = nds.no_noise.R19)
print(res.IF.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.IT.field = GROAN.run(nds = nds.no_noise.IT, wb = wb5, nds.test = nds.no_noise.R19)
print(res.IT.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.DS.field = GROAN.run(nds = nds.no_noise.DS, wb = wb5, nds.test = nds.no_noise.R19)
print(res.DS.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.Index.field = GROAN.run(nds = nds.no_noise.I_cc_FAI, wb = wb5, nds.test = nds.no_noise.R19)
print(res.Index.field[,c('dataset.train', 'dataset.test', 'pearson')])
predictors.field <- rbind(res.AUDPC.field,res.IF.field,res.IT.field,res.DS.field,res.Index.field)
predictors.field$pearson <- abs(predictors.field$pearson)
head(predictors.field)
plotResult(predictors.field, variable = "pearson")
predictors.field %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
write.xlsx(predictors.field, "results/field&MEGAenv_traits_predictorsDArT.xlsx")
nds.no_noise.Rust
nds.no_noise.Rust <- createNoisyDataset(
name = 'PEA Rust field',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$Rust)
res.AUDPC.field = GROAN.run(nds = nds.no_noise.AUDPC, wb = wb5, nds.test = nds.no_noise.Rust)
print(res.AUDPC.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.IF.field = GROAN.run(nds = nds.no_noise.IF, wb = wb5, nds.test = nds.no_noise.Rust)
print(res.IF.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.IT.field = GROAN.run(nds = nds.no_noise.IT, wb = wb5, nds.test = nds.no_noise.Rust)
print(res.IT.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.DS.field = GROAN.run(nds = nds.no_noise.DS, wb = wb5, nds.test = nds.no_noise.Rust)
print(res.DS.field[,c('dataset.train', 'dataset.test', 'pearson')])
res.Index.field = GROAN.run(nds = nds.no_noise.I_cc_FAI, wb = wb5, nds.test = nds.no_noise.Rust)
print(res.Index.field[,c('dataset.train', 'dataset.test', 'pearson')])
predictors.field <- rbind(res.AUDPC.field,res.IF.field,res.IT.field,res.DS.field,res.Index.field)
predictors.field$pearson <- abs(predictors.field$pearson)
head(predictors.field)
plotResult(predictors.field, variable = "pearson")
predictors.field %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
write.xlsx(predictors.field, "results/field&MEGAenv_traits_predictorsDArT.xlsx")
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/results")
write.xlsx(predictors.field, "field&MEGAenv_traits_predictorsDArT.xlsx")
