# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
dim(Pheno_rust)
# 2) Make sure NAs are properly read it.
# Calculate the % of missing value within the matrix n x m:
dim(DArT_rust)
(sum(is.na(DArT_rust))/(length(DArT_rust)))*100  # there is a 5.31 % of missing data into the matrix n x m
DArT_rust_SVDI <-
impute.svd(DArT_rust, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
# 3) Impute your data "filling" all the NA's (SVDI)
library(bcv)
DArT_rust_SVDI <-
impute.svd(DArT_rust, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_rust_SVDI[DArT_rust_SVDI >= 1.5] <- 2
DArT_rust_SVDI[DArT_rust_SVDI <= 0.5] <- 0
DArT_rust_SVDI[DArT_rust_SVDI > 0.5 & DArT_rust_SVDI < 1.5]<- 1
Pheno_rust_df <- as.data.frame(Pheno_rust)
head(Pheno_rust_df)
#Hasta ahora tengo los resultados del escenario [CV1], rehacer en el escenario [CV2]: new env new lines:
# Define the training (90 % = 224 genotypes) and validation (10 % = 96 genotypes) populations
train <- as.matrix(sample(1:320, 288))
test <- setdiff(1:320, train)
# Pheno_train and m_train are the phenotype and marker matrices for the values in the training population
# Pheno_valid and m_valid will be the validation populations
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
# Pheno_train and m_train are the phenotype and marker matrices for the values in the training population
# Pheno_valid and m_valid will be the validation populations
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid_R19 = Pheno_rust_df$R19[test, ]
m_valid_R19 = DArT_rust_SVDI[test, ]
# Pheno_train and m_train are the phenotype and marker matrices for the values in the training population
# Pheno_valid and m_valid will be the validation populations
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid_R19 = Pheno_rust_df$R19[test, ]
Pheno_rust_df$R19
Pheno_rust_df$R19[test, ]
# Pheno_train and m_train are the phenotype and marker matrices for the values in the training population
# Pheno_valid and m_valid will be the validation populations
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
head(Pheno_valid)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
head(Pheno_valid)
train <- as.matrix(sample(1:320, 288))
test <- setdiff(1:320, train)
# Pheno_train and m_train are the phenotype and marker matrices for the values in the training population
# Pheno_valid and m_valid will be the validation populations
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
head(Pheno_valid)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_R19
AUDPC_R19_valid = Pheno_valid[, 2]
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
mean(AUDPC_R19_accuracy)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_R19
AUDPC_R19_valid = Pheno_valid[, 2]
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
(Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
m_train
m_train = DArT_rust_SVDI[train, ]
dim(m_train)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
head(Pheno_train)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
View(DArT_rust_SVDI)
DArT <- as.matrix(read.table("data/DArT.txt", header = T))
DArT[DArT == 1] <- 2 #change 1 to 2
DArT_GROAN <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_GROAN_SVDI <-
impute.svd(DArT_GROAN, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
DArT_rust_SVDI <- as.matrix(read.table("DArT_noNA_SVDmethod.txt",header = T)
DArT_rust_SVDI <- as.matrix(read.table("DArT_noNA_SVDmethod.txt",header = T))
DArT_rust_SVDI <- as.matrix(read.table("DArT_noNA_SVDmethod.txt",header = T))
View(DArT_rust_SVDI)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
# 1) Load Genotypic data, DArT markers:
DArT <- as.matrix(read.table("DArT.txt", header = T))
View(DArT)
DArT[DArT == 0] <- -1 #change 0 to -1
DArT_rust <- DArT[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
DArT_rust_SVDI <-
impute.svd(DArT_rust, # data matrix with missing values
k = 4, #the rank of the SVD approximation, I use k = 4 following Nazzicari, N. 2016
#tol = max(24279, 325) * 1e-10, #the convergence tolerance for the EM algorithm
maxiter = 100 #the maximum number of EM steps to take
)$x
View(DArT_rust_SVDI)
DArT_rust_SVDI[DArT_rust_SVDI >= 0.5] <- 1
DArT_rust_SVDI[DArT_rust_SVDI <= -0.5] <- -1
DArT_rust_SVDI[DArT_rust_SVDI < 0.5 & DArT_rust_SVDI > -0.5]<- 0
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
class(AUDPC)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
View(Pheno_rust)
as.numeric(Pheno_rust)
Pheno_rust <- as.numeric(Pheno_rust)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust[test, ]
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
Pheno_rust_df <- as.data.frame(Pheno_rust)
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
Pheno_rust_df$IF <- as.numeric(Pheno_rust_df$IF)
Pheno_rust_df$IT <- as.numeric(Pheno_rust_df$IT)
Pheno_rust_df$DS <- as.numeric(Pheno_rust_df$DS)
Pheno_rust_df$R19 <- as.numeric(Pheno_rust_df$R19)
Pheno_rust_df$I_cc_FAI <- as.numeric(Pheno_rust_df$I_cc_FAI)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_R19
AUDPC_R19_valid = Pheno_valid[, 2]
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
mean(AUDPC_R19_accuracy)
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_AUDPC
AUDPC_R19_valid = Pheno_valid[, 2]
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
mean(AUDPC_R19_accuracy)
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_AUDPC_valid[, 1]
pred_AUDPC
AUDPC_R19_valid = Pheno_valid[, 2]
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
AUDPC_R19_valid
pred_AUDPC_valid
Pheno_valid[, 2]
AUDPC_R19_valid = as.numeric(Pheno_valid[, 2])
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
traits = 1
cycles = 500
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_AUDPC
AUDPC_R19_valid = as.numeric(Pheno_valid[, 2])
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
mean(AUDPC_R19_accuracy)
head(Pheno_rust_df)
AUDPC_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
AUDPC = (Pheno_train[, 5])
AUDPC_answer <- mixed.solve(AUDPC, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = AUDPC_answer$u
e = as.matrix(u)
pred_AUDPC_valid = m_valid %*% e
pred_AUDPC = pred_AUDPC_valid[, 1] + AUDPC_answer$beta
pred_AUDPC
AUDPC_R19_valid = as.numeric(Pheno_valid[, 3])
AUDPC_R19_accuracy[r, 1] <-  cor(pred_AUDPC_valid, AUDPC_R19_valid, use = "complete")
}
mean(AUDPC_R19_accuracy)
DS_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
DS = (Pheno_train[, 9])
DS_answer <- mixed.solve(DS, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = DS_answer$u
e = as.matrix(u)
pred_DS_valid = m_valid %*% e
pred_DS = pred_DS_valid[, 1] + DS_answer$beta
pred_DS
DS_R19_valid = as.numeric(Pheno_valid[, 3])
DSC_R19_accuracy[r, 1] <-  cor(pred_DS_valid, DS_R19_valid, use = "complete")
}
mean(DS_R19_accuracy)
IF_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
IF = (Pheno_train[, 7])
IF_answer <- mixed.solve(IF, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = IF_answer$u
e = as.matrix(u)
pred_IF_valid = m_valid %*% e
pred_IF = pred_IF_valid[, 1] + IF_answer$beta
pred_IF
IF_R19_valid = as.numeric(Pheno_valid[, 3])
IFC_R19_accuracy[r, 1] <-  cor(pred_IF_valid, IF_R19_valid, use = "complete")
}
mean(IF_R19_accuracy)
IT_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
IT = (Pheno_train[, 8])
IT_answer <- mixed.solve(IT, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = IT_answer$u
e = as.matrix(u)
pred_IT_valid = m_valid %*% e
pred_IT = pred_IT_valid[, 1] + IT_answer$beta
pred_IT
IT_R19_valid = as.numeric(Pheno_valid[, 3])
ITC_R19_accuracy[r, 1] <-  cor(pred_IT_valid, IT_R19_valid, use = "complete")
}
mean(IT_R19_accuracy)
Index_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
Index = (Pheno_train[, 14])
Index_answer <- mixed.solve(Index, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = Index_answer$u
e = as.matrix(u)
pred_Index_valid = m_valid %*% e
pred_Index = pred_Index_valid[, 1] + Index_answer$beta
pred_Index
Index_R19_valid = as.numeric(Pheno_valid[, 3])
IndexC_R19_accuracy[r, 1] <-  cor(pred_Index_valid, Index_R19_valid, use = "complete")
}
mean(Index_R19_accuracy)
DS_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
DS = (Pheno_train[, 9])
DS_answer <- mixed.solve(DS, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = DS_answer$u
e = as.matrix(u)
pred_DS_valid = m_valid %*% e
pred_DS = pred_DS_valid[, 1] + DS_answer$beta
pred_DS
DS_R19_valid = as.numeric(Pheno_valid[, 3])
DS_R19_accuracy[r, 1] <-  cor(pred_DS_valid, DS_R19_valid, use = "complete")
}
mean(DS_R19_accuracy)
IF_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
IF = (Pheno_train[, 7])
IF_answer <- mixed.solve(IF, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = IF_answer$u
e = as.matrix(u)
pred_IF_valid = m_valid %*% e
pred_IF = pred_IF_valid[, 1] + IF_answer$beta
pred_IF
IF_R19_valid = as.numeric(Pheno_valid[, 3])
IF_R19_accuracy[r, 1] <-  cor(pred_IF_valid, IF_R19_valid, use = "complete")
}
mean(IF_R19_accuracy)
IT_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
IT = (Pheno_train[, 8])
IT_answer <- mixed.solve(IT, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = IT_answer$u
e = as.matrix(u)
pred_IT_valid = m_valid %*% e
pred_IT = pred_IT_valid[, 1] + IT_answer$beta
pred_IT
IT_R19_valid = as.numeric(Pheno_valid[, 3])
IT_R19_accuracy[r, 1] <-  cor(pred_IT_valid, IT_R19_valid, use = "complete")
}
mean(IT_R19_accuracy)
Index_R19_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:320, 288))
test = setdiff(1:320, train)
Pheno_train = Pheno_rust_df[train, ]
m_train = DArT_rust_SVDI[train, ]
Pheno_valid = Pheno_rust_df[test, ]
m_valid = DArT_rust_SVDI[test, ]
Index = (Pheno_train[, 14])
Index_answer <- mixed.solve(Index, Z = m_train, K = NULL, SE = F, return.Hinv = F)
u = Index_answer$u
e = as.matrix(u)
pred_Index_valid = m_valid %*% e
pred_Index = pred_Index_valid[, 1] + Index_answer$beta
pred_Index
Index_R19_valid = as.numeric(Pheno_valid[, 3])
Index_R19_accuracy[r, 1] <-  cor(pred_Index_valid, Index_R19_valid, use = "complete")
}
mean(Index_R19_accuracy)
CV2_DArT_rrBLUP <- rbind(AUDPC_R19_accuracy,DS_R19_accuracy,IF_R19_accuracy,IT_R19_accuracy,Index_R19_accuracy)
View(CV2_DArT_rrBLUP)
View(AUDPC_R19_accuracy)
boxplot(AUDPC_R19_accuracy)
boxplot(DS_R19_accuracy)
boxplot(IF_R19_accuracy)
boxplot(IT_R19_accuracy)
boxplot(Index_R19_accuracy)
CV2_DArT_rrBLUP <- cbind(AUDPC_R19_accuracy,DS_R19_accuracy,IF_R19_accuracy,IT_R19_accuracy,Index_R19_accuracy)
View(CV2_DArT_rrBLUP)
boxplot(CV2_DArT_rrBLUP)
write.xlsx(CV2_DArT_rrBLUP, "results/CV2_DArT_rrBLUP.xlsx")
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
write.xlsx(CV2_DArT_rrBLUP, "results/CV2_DArT_rrBLUP.xlsx")
CV2_DArT_rrBLUP
write.xlsx(x = CV2_DArT_rrBLUP, file = "results/CV2_DArT_rrBLUP.xlsx", asTable = T, overwrite = T)
CV2_DArT_rrBLUP <- data.frame(CV2_DArT_rrBLUP)
write.xlsx(x = CV2_DArT_rrBLUP, file = "results/CV2_DArT_rrBLUP.xlsx", asTable = T, overwrite = T)
write.xlsx(x = CV2_DArT_rrBLUP, file = "results/CV2_DArT_rrBLUP.xlsx", overwrite = T)
