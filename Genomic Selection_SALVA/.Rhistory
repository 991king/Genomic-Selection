library(metan)
library(openxlsx)
library(tidyverse)
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", colNames = T)
library(readxl)
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", colNames = T)
DS_DS <- read_xlsx("data/CC_R19traits.xlsx")
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx")
View(DS_DS)
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
et_model_data(mixed_mod, "lrt")
et_model_data(mixed_modsdfsdf, "lrt")
get_model_data(mixed_modsdfsdf, "lrt")
get_model_data(mixed_modsdfsdf)
get_model_data(mixed_modsdfsdf, "genpar")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "AUDPC_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE) #Default
get_model_data(mixed_modsdfsdf, "genpar")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "AUDPC_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "IF_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "IF_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "IT_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
DS_DS <- read_xlsx("data/CC_R19traits.xlsx", sheet = "Index_DS")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE,
block = BLOCK) #Default
get_model_data(mixed_modsdfsdf, "genpar")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
rep = REP,
resp = Rust,
random = "gen", #Default
verbose = TRUE) #Default
get_model_data(mixed_modsdfsdf, "genpar")
mixed_modsdfsdf <-
gamem_met(DS_DS,
env = ENV,
gen = GEN,
resp = Rust,
random = "gen", #Default
verbose = TRUE) #Default
install.packages(quant_gen)
install.packages("quant_gen")
corr_plot(DS_DS, "R19", "CC")
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
corr_plot(Pheno_rust)
Pheno_rust <- data.frame(Pheno_rust)
corr_plot(Pheno_rust)
corr_plot(Pheno_rust, c("AUDPC", "R19"))
corr_plot(Pheno_rust, "AUDPC", "R19")
cor(Pheno_rust$R19, Pheno_rust$AUDPC, method = "pearson")
Pheno_rust$R19 <- as.numeric(Pheno_rust$R19)
Pheno_rust$AUDPC <- as.numeric(Pheno_rust$AUDPC)
cor(Pheno_rust$R19, Pheno_rust$AUDPC, method = "pearson")
Pheno_rust$R19 <- as.numeric(Pheno_rust$R19)
Pheno_rust$AUDPC <- as.numeric(Pheno_rust$AUDPC)
Pheno_rust$IF <- as.numeric(Pheno_rust$IF)
Pheno_rust$IT <- as.numeric(Pheno_rust$IT)
Pheno_rust$DS <- as.numeric(Pheno_rust$DS)
Pheno_rust$I_cc_FAI <- as.numeric(Pheno_rust$I_cc_FAI)
corr_plot(Pheno_rust, c("R19", "AUDPC"))
corr_plot(Pheno_rust, c("R19", "AUDPC", "IF", "IT", "DS", "I_cc_FAI"))
0.22/(sqrt(0.76)*sqrt(0.67))
76
0.25/(sqrt(0.76)*sqrt(0.67))
0.23/(sqrt(0.67)*sqrt(0.67))
0.26/(sqrt(86)*sqrt(0.67))
0.26/(sqrt(0.86)*sqrt(0.67))
0.30/(sqrt(0.76)*sqrt(0.67))
#Also load SNP markers and convert to numerical with GAPIT:
library(GAPIT3)
myG <- read.table("PisumSNP_filtered.hmp.txt", head = FALSE)
myG <- read.table("data/PisumSNP_filtered.hmp.txt", head = FALSE)
myG <- read.table("data/PisumSNP_filtered.hmp.txt", head = T)
myG <- read.table("data/SNP.txt", head = T)
View(myG)
myG <- read.table("data/SNP_numeric.txt", head = F)
View(myG)
myG <- read.txt("data/SNP_numeric.txt")
myG <- read_table("data/SNP_numeric.txt")
View(myG)
myGAPIT <- GAPIT(G=myG[,-1], output.numerical=TRUE)
myG <- read_table("data/SNP_numeric.txt")
View(myG)
myG <- read_table("data/SNP_numeric.txt", col_names = FALSE)
myG <- read_table("data/SNP_numeric.txt", col_names = T)
myG <- read_table("data/SNP_numeric.txt", col_names = T)
View(myG)
myG_rust <- myG[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
#Also load SNP markers:
myG <- read_table("data/SNP_numeric.txt", col_names = T)
myG_rust <- myG[-c(288, 294, 300, 320, 325), -1] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust <- myG[-c(288, 294, 300, 320, 325), ] #Estas entradas no están evaluadas en CC así que las quito
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(0)] #Estas entradas no están evaluadas en CC así que las quito
View(myG_rust)
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
View(myG_rust)
myG_rust[myG_rust == 1] <- 2
#Also load SNP markers:
myG <- as.matrix(read_table("data/SNP_numeric.txt", col_names = T))
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust[myG_rust == 0.5] <- 1
myG_rust[myG_rust == 0,5] <- 1
