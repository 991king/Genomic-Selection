setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
#Also load SNP markers:
myG <- as.matrix(read_table("data/SNP_numeric.txt", col_names = T))
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", col_names = T))
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T))
View(myG)
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
View(myG_rust)
myG_rust[myG_rust == 1] <- 2
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T))
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust[myG_rust == 0.5] <- 1
dim(myG_rust)
(sum(is.na(myG_rust))/(length(myG_rust)))*100
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
library(openxlsx)
library(rrBLUP)
############################################################################
###                                                                      ###
###                         DATA PREPARATION                             ###
###                                                                      ###
############################################################################
library(openxlsx)
library(readxl)
library(openxlsx)
library(metan)
library(ggstatsplot)
library(tidyverse)
library(GGEBiplots)
library(multcompView)
library(GROAN)
library(BGLR)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
dim(Pheno_rust)
dim(DArT_rust_SVDI)
dim(myG_rust)
#Ahora voy a hacer lo mismo con GROAN intentando 50 rep. de 10 fold cross-validation:
library(GROAN)
#creating the BL regressor:
library(BGLR)
#create wb
wb <- createWorkbench(regressor = phenoRegressor.rrBLUP,
regressor.name = 'rrBLUP',
stratified = T,
reps = 50,
folds = 10)
wb2 <- createWorkbench(wb,
regressor.name = 'Bayesian Lasso',
outfolder = "/results",
saveHyperParms=F,
saveExtraData = F,
type = 'BL',
stratified = T,
reps = 50,
folds = 10)
#ahora voy a hacer un wb que incluya los cuatro regresores más usados: rrBLUP, GBLUP, BL y RKHS
#sabiendo que FAI2 es el mejor predictor para DS2019, ahora voy a ver qué modelo es mejor:
wb4 = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = F,
#parameters defining save-on-hard-disk policy
outfolder = "", saveHyperParms = F, saveExtraData = F,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
wb5 = addRegressor(
#the Workbench to be updater
wb4,
#the new regressor
regressor = phenoRegressor.BGLR, regressor.name = 'Bayesian Lasso',
#regressor-specific parameters
type = 'BL'
)
print(wb5)
View(Pheno_rust)
Pheno_rust_df <- as.data.frame(Pheno_rust)
head(Pheno_rust_df)
Pheno_rust_df$AUDPC
myG_rust <- as.data.frame(myG_rust)
#Voy a repetir un GROAN con los dos modelos más usados rrBLUP y GBLUP para cada trait campo y cámara, esta vez con SNPs:
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
summary(Pheno_rust_df)
Pheno_rust_df <- as.numeric(Pheno_rust_df)
#Voy a repetir un GROAN con los dos modelos más usados rrBLUP y GBLUP para cada trait campo y cámara, esta vez con SNPs:
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
View(myG_rust)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
#Voy a repetir un GROAN con los dos modelos más usados rrBLUP y GBLUP para cada trait campo y cámara, esta vez con SNPs:
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
summary(myG_rust)
summary(myG_rust[,1:5])
#Voy a repetir un GROAN con los dos modelos más usados rrBLUP y GBLUP para cada trait campo y cámara, esta vez con SNPs:
myG_rust <- as.numeric(myG_rust)
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T, numerals = c(1:11511)))
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T, numerals = T))
num <- c(1:11511)
num <- as.vector(c(1:11511))
num <- sample("numeric", 11511)
num <- sample("numeric", 11511, replace = F)
num <- sample("numeric", 11511, replace = T)
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T, numerals = num))
num
num <- sample("num", 11511, replace = T)
#Also load SNP markers:
myG <- as.matrix(read.csv("data/SNP_numeric1.csv", header = T, colClasses = num))
#Also load SNP markers:
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T))
num <- sample("num", 11511, replace = T)
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust[myG_rust == 0.5] <- 1
myG_rust <- as.data.frame(myG_rust)
myG <- as.matrix(read.table("data/SNP_numeric.txt", header = T))
num <- sample("num", 11511, replace = T)
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust[myG_rust == 0.5] <- 1
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
View(myG_rust)
#Also load SNP markers:
myG <- as.matrix(read_excel("data/SNP_numeric2.xlsx", colNames = T, col_types = num))
#Also load SNP markers:
myG <- as.matrix(read_excel("data/SNP_numeric2.xlsx", col_types = num, col_names = T))
num <- sample("numeric", 11512, replace = T)
#Also load SNP markers:
myG <- as.matrix(read_excel("data/SNP_numeric2.xlsx", col_types = num, col_names = T))
myG_rust <- myG[-c(288, 294, 300, 320, 325), -c(1)] #Estas entradas no están evaluadas en CC así que las quito
myG_rust[myG_rust == 1] <- 2
myG_rust[myG_rust == 0.5] <- 1
myG_rust <- as.data.frame(myG_rust)
Pheno_rust_df$AUDPC <- as.numeric(Pheno_rust_df$AUDPC)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
Pheno_rust_df$AUDPC
#Voy a repetir un GROAN con los dos modelos más usados rrBLUP y GBLUP para cada trait campo y cámara, esta vez con SNPs:
dim(myG_rust)
dim(Pheno_rust_df$AUDPC)
dim(Pheno_rust_df)
res.no_noise.AUDPC <- GROAN.run(nds.no_noise.AUDPC, wb5)
wb5
#ahora voy a hacer un wb que incluya los cuatro regresores más usados: rrBLUP, GBLUP, BL y RKHS
#sabiendo que FAI2 es el mejor predictor para DS2019, ahora voy a ver qué modelo es mejor:
wb4 = createWorkbench(
#parameters defining crossvalidation
folds = 10, reps = 50, stratified = F,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = F, saveExtraData = F,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
wb5 = addRegressor(
#the Workbench to be updater
wb4,
#the new regressor
regressor = phenoRegressor.BGLR, regressor.name = 'Bayesian Lasso',
#regressor-specific parameters
type = 'BL'
)
print(wb5)
nds.no_noise.AUDPC<- createNoisyDataset(
name = 'AUDPC, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$AUDPC)
res.no_noise.AUDPC <- GROAN.run(nds.no_noise.AUDPC, wb5)
plotResult(res.no_noise.AUDPC)
View(res.no_noise.AUDPC)
Pheno_rust_df$IF <- as.numeric(Pheno_rust_df$IF)
nds.no_noise.IF<- createNoisyDataset(
name = 'IF, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$IF)
res.no_noise.IF <- GROAN.run(nds.no_noise.IF, wb5)
Pheno_rust_df$IT <- as.numeric(Pheno_rust_df$IT)
nds.no_noise.IT<- createNoisyDataset(
name = 'IT, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$IT)
res.no_noise.IT <- GROAN.run(nds.no_noise.IT, wb5)
Pheno_rust_df$DS <- as.numeric(Pheno_rust_df$DS)
nds.no_noise.DS<- createNoisyDataset(
name = 'DS, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$DS)
res.no_noise.DS <- GROAN.run(nds.no_noise.DS, wb5)
Pheno_rust_df$R19 <- as.numeric(Pheno_rust_df$R19)
nds.no_noise.R19<- createNoisyDataset(
name = 'R19, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$R19)
res.no_noise.R19 <- GROAN.run(nds.no_noise.R19, wb5)
Pheno_rust_df$I_cc_FAI <- as.numeric(Pheno_rust_df$I_cc_FAI)
nds.no_noise.I_cc_FAI<- createNoisyDataset(
name = 'I_cc_FAI, no noise',
genotypes = myG_rust,
phenotypes = Pheno_rust_df$I_cc_FAI)
res.no_noise.I_cc_FAI <- GROAN.run(nds.no_noise.I_cc_FAI, wb5)
res.total3 <- rbind(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.LP50, res.no_noise.R18, res.no_noise.R19, res.no_noise.R20)
write.xlsx(res.total3, "results/field&CC_traits_twomarkers.xlsx")
plotResult(res.total3)
res.total2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
View(res.no_noise.AUDPC)
plotResult(res.total3)
res.total3 <- rbind(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.R19)
res.total3 <- rbind(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.I_cc_FAI, res.no_noise.IF, res.no_noise.IT,
res.no_noise.R19)
write.xlsx(res.total3, "results/field&CC_traits_twomarkers.xlsx")
plotResult(res.total3)
res.total3 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res.AUDPC = GROAN.run(nds = nds.no_noise.AUDPC, wb = wb5, nds.test = nds.no_noise.R19)
print(res.AUDPC[,c('dataset.train', 'dataset.test', 'pearson')])
res.IF = GROAN.run(nds = nds.no_noise.IF, wb = wb5, nds.test = nds.no_noise.R19)
print(res.IF[,c('dataset.train', 'dataset.test', 'pearson')])
res.IT = GROAN.run(nds = nds.no_noise.IT, wb = wb5, nds.test = nds.no_noise.R19)
print(res.IT[,c('dataset.train', 'dataset.test', 'pearson')])
res.DS = GROAN.run(nds = nds.no_noise.DS, wb = wb5, nds.test = nds.no_noise.R19)
print(res.DS[,c('dataset.train', 'dataset.test', 'pearson')])
res.I_cc_FAI = GROAN.run(nds = nds.no_noise.I_cc_FAI, wb = wb5, nds.test = nds.no_noise.R19)
print(res.I_cc_FAI[,c('dataset.train', 'dataset.test', 'pearson')])
predictorsSNP <- rbind(res.AUDPC,res.IF,res.IT,res.DS,res.I_cc_FAI)
predictorsSNP$pearson <- abs(predictorsSNP$pearson)
head(predictorsSNP)
plotResult(predictorsSNP, variable = "pearson")
predictorsSNP %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = mean(pearson))
write.xlsx(predictorsSNP, "results/field&CC_traits_predictorsSNP.xlsx")
wb5
nds.no_noise.AUDPC
nds.no_noise.R19
