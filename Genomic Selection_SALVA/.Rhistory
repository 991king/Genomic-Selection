#Create the vectors for the BLOCK/ROW average by REP
trait_B1 <- df %>%
group_by(BLOCK) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B2 <- df %>%
group_by(BLOCK) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B3 <- df %>%
group_by(BLOCK) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_R1 <- df %>%
group_by(ROW) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R2 <- df %>%
group_by(ROW) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R3 <- df %>%
group_by(ROW) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
#Create the matrixes with the CF for the trait selected:
RowsR1 <- c(trait_R1$trait)
BlocksR1 <- c(trait_B1$trait)
RowsR2 <- c(trait_R2$trait)
BlocksR2 <- c(trait_B2$trait)
RowsR3 <- c(trait_R3$trait)
BlocksR3 <- c(trait_B3$trait)
my_matR1 <- matrix(nrow=max(df$ROW), ncol=max(df$BLOCK))
for (i in 1:length(RowsR1)){
for (j in 1:length(BlocksR1)){
my_matR1[i,j] <- mean_trait/((RowsR1[i]+BlocksR1[j])/2)
}
}
return(my_matR1)
}
F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
F2 <- function(df, trait, mean_trait) {
#Create the vectors for the BLOCK/ROW average by REP
trait_B1 <- df %>%
group_by(BLOCK) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B2 <- df %>%
group_by(BLOCK) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B3 <- df %>%
group_by(BLOCK) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_R1 <- df %>%
group_by(ROW) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R2 <- df %>%
group_by(ROW) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R3 <- df %>%
group_by(ROW) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
#Create the matrixes with the CF for the trait selected:
RowsR1 <- c(trait_R1$trait)
BlocksR1 <- c(trait_B1$trait)
RowsR2 <- c(trait_R2$trait)
BlocksR2 <- c(trait_B2$trait)
RowsR3 <- c(trait_R3$trait)
BlocksR3 <- c(trait_B3$trait)
my_matR1 <- matrix(nrow=max(df$ROW), ncol=max(df$BLOCK))
for (i in 1:length(RowsR1)){
for (j in 1:length(BlocksR1)){
my_matR1[i,j] <- mean_trait/((RowsR1[i]+BlocksR1[j])/2)
}
}
my_matR2 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR2)){
for (j in 1:length(BlocksR2)){
my_matR2[i,j]<-(mean(R18$T_Germ))/((RowsR2[i]+BlocksR2[j])/2)
}
}
my_matR3 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR3)){
for (j in 1:length(BlocksR3)){
my_matR3[i,j]<-(mean(R18$T_Germ))/((RowsR3[i]+BlocksR3[j])/2)
}
}
#Convert the matrixes to one column to add it in the df
CF1<- as.tibble(unlist(c(my_matR1)))
CF2 <- as.tibble(unlist(c(my_matR2)))
CF3 <- as.tibble(unlist(c(my_matR3)))
FC_trait <- rbind(CF1, CF2, CF3)
return(FC_trait)
}
F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
F2 <- function(df, trait, mean_trait) {
#Create the vectors for the BLOCK/ROW average by REP
trait_B1 <- df %>%
group_by(BLOCK) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B2 <- df %>%
group_by(BLOCK) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B3 <- df %>%
group_by(BLOCK) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_R1 <- df %>%
group_by(ROW) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R2 <- df %>%
group_by(ROW) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R3 <- df %>%
group_by(ROW) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
#Create the matrixes with the CF for the trait selected:
RowsR1 <- c(trait_R1$trait)
BlocksR1 <- c(trait_B1$trait)
RowsR2 <- c(trait_R2$trait)
BlocksR2 <- c(trait_B2$trait)
RowsR3 <- c(trait_R3$trait)
BlocksR3 <- c(trait_B3$trait)
my_matR1 <- matrix(nrow=max(df$ROW), ncol=max(df$BLOCK))
for (i in 1:length(RowsR1)){
for (j in 1:length(BlocksR1)){
my_matR1[i,j] <- mean_trait/((RowsR1[i]+BlocksR1[j])/2)
}
}
my_matR2 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR2)){
for (j in 1:length(BlocksR2)){
my_matR2[i,j]<-(mean(R18$T_Germ))/((RowsR2[i]+BlocksR2[j])/2)
}
}
my_matR3 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR3)){
for (j in 1:length(BlocksR3)){
my_matR3[i,j]<-(mean(R18$T_Germ))/((RowsR3[i]+BlocksR3[j])/2)
}
}
#Convert the matrixes to one column to add it in the df
CF1<- as.tibble(unlist(c(my_matR1)))
CF2 <- as.tibble(unlist(c(my_matR2)))
CF3 <- as.tibble(unlist(c(my_matR3)))
FC_trait <- rbind(CF1, CF2, CF3)
#Add to the data frame the correction factor column and multiply by its trait, creating a new column
df <- df %>%
mutate(trait = as.numeric(unlist(trait * FC_trait)))
return(df)
}
F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
F2 <- function(df, trait, mean_trait) {
#Create the vectors for the BLOCK/ROW average by REP
trait_B1 <- df %>%
group_by(BLOCK) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B2 <- df %>%
group_by(BLOCK) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B3 <- df %>%
group_by(BLOCK) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_R1 <- df %>%
group_by(ROW) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R2 <- df %>%
group_by(ROW) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R3 <- df %>%
group_by(ROW) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
#Create the matrixes with the CF for the trait selected:
RowsR1 <- c(trait_R1$trait)
BlocksR1 <- c(trait_B1$trait)
RowsR2 <- c(trait_R2$trait)
BlocksR2 <- c(trait_B2$trait)
RowsR3 <- c(trait_R3$trait)
BlocksR3 <- c(trait_B3$trait)
my_matR1 <- matrix(nrow=max(df$ROW), ncol=max(df$BLOCK))
for (i in 1:length(RowsR1)){
for (j in 1:length(BlocksR1)){
my_matR1[i,j] <- mean_trait/((RowsR1[i]+BlocksR1[j])/2)
}
}
my_matR2 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR2)){
for (j in 1:length(BlocksR2)){
my_matR2[i,j]<-(mean(R18$T_Germ))/((RowsR2[i]+BlocksR2[j])/2)
}
}
my_matR3 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR3)){
for (j in 1:length(BlocksR3)){
my_matR3[i,j]<-(mean(R18$T_Germ))/((RowsR3[i]+BlocksR3[j])/2)
}
}
#Convert the matrixes to one column to add it in the df
CF1<- as.tibble(unlist(c(my_matR1)))
CF2 <- as.tibble(unlist(c(my_matR2)))
CF3 <- as.tibble(unlist(c(my_matR3)))
FC_trait <- rbind(CF1, CF2, CF3)
#Add to the data frame the correction factor column and multiply by its trait, creating a new column
df <- df %>%
mutate(trait = as.numeric(unlist({{trait}} * FC_trait)))
return(df)
}
F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
library(metan)
library(readxl)
library(tidyverse)
library(hrbrthemes)
R18 <- read_excel("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/Ensayocampo2018.xlsx", sheet = "RawData", col_types =
c("text", #ENV
"numeric", #REP
"numeric", #BLOCK
"numeric", #ROW
"text", #GEN
"numeric", #GERM
"numeric", #BIOM
"numeric", #BIOM_PL
"numeric", #YIELD
"numeric", #YIELD_PL
"numeric", #BIOM/YIELD
"numeric", #Rust in %
"numeric", #Dtf
"numeric", #DtFP
"numeric", #DtP
"numeric", #Ascochyta in %
"numeric"  #Oidio in %
))
F1 <- function(df, trait) {
#Is there differences between REPs in the control for the trait selected??
p <- df %>% filter(GEN == "Control") %>% ggbetweenstats(
x     = REP,
y     = {{trait}},
title = c("Distribution of {{trait}} across Replicates in the Controls")
)
return(p)
}
F2 <- function(df, trait, mean_trait) {
#Create the vectors for the BLOCK/ROW average by REP
trait_B1 <- df %>%
group_by(BLOCK) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B2 <- df %>%
group_by(BLOCK) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_B3 <- df %>%
group_by(BLOCK) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(BLOCK)
trait_R1 <- df %>%
group_by(ROW) %>%
filter(REP == "1") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R2 <- df %>%
group_by(ROW) %>%
filter(REP == "2") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
trait_R3 <- df %>%
group_by(ROW) %>%
filter(REP == "3") %>%
filter(GEN == "Control") %>%
summarise(trait = mean({{trait}})) %>%
arrange(ROW)
#Create the matrixes with the CF for the trait selected:
RowsR1 <- c(trait_R1$trait)
BlocksR1 <- c(trait_B1$trait)
RowsR2 <- c(trait_R2$trait)
BlocksR2 <- c(trait_B2$trait)
RowsR3 <- c(trait_R3$trait)
BlocksR3 <- c(trait_B3$trait)
my_matR1 <- matrix(nrow=max(df$ROW), ncol=max(df$BLOCK))
for (i in 1:length(RowsR1)){
for (j in 1:length(BlocksR1)){
my_matR1[i,j] <- mean_trait/((RowsR1[i]+BlocksR1[j])/2)
}
}
my_matR2 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR2)){
for (j in 1:length(BlocksR2)){
my_matR2[i,j]<-(mean(R18$T_Germ))/((RowsR2[i]+BlocksR2[j])/2)
}
}
my_matR3 <- matrix(nrow=max(R18$ROW), ncol=max(R18$BLOCK))
for (i in 1:length(RowsR3)){
for (j in 1:length(BlocksR3)){
my_matR3[i,j]<-(mean(R18$T_Germ))/((RowsR3[i]+BlocksR3[j])/2)
}
}
#Convert the matrixes to one column to add it in the df
CF1<- as.tibble(unlist(c(my_matR1)))
CF2 <- as.tibble(unlist(c(my_matR2)))
CF3 <- as.tibble(unlist(c(my_matR3)))
FC_trait <- rbind(CF1, CF2, CF3)
#Add to the data frame the correction factor column and multiply by its trait, creating a new column
df <- df %>%
mutate(trait = as.numeric(unlist({{trait}} * FC_trait)))
return(df)
}
meanGERM <- mean(R18$T_Germ)
str(meanGERM)
#new.df <- df %>%
#  mutate(trait_t = as.numeric(unlist(trait * FC_trait)))
#return(new.df)
F1(R18, T_Germ)
F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
library(metan)
library(readxl)
library(tidyverse)
library(ggstatsplot)
library(hrbrthemes)
R18 <- read_excel("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/Ensayocampo2018.xlsx", sheet = "RawData", col_types =
c("text", #ENV
"numeric", #REP
"numeric", #BLOCK
"numeric", #ROW
"text", #GEN
"numeric", #GERM
"numeric", #BIOM
"numeric", #BIOM_PL
"numeric", #YIELD
"numeric", #YIELD_PL
"numeric", #BIOM/YIELD
"numeric", #Rust in %
"numeric", #Dtf
"numeric", #DtFP
"numeric", #DtP
"numeric", #Ascochyta in %
"numeric"  #Oidio in %
))
#Check the differences between values normalized with controls and row values:
comparison <- data.frame(type = c(rep("Germ", 1083),rep("Germ_T", 1083)),
value = c(R18_t$T_Germ, R18_t$GERM_t))
p <- comparison %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity', bins = 10) +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
#Data frame with the new column "trait" normalized with the controls for that trait
newdf< -F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
#Data frame with the new column "trait" normalized with the controls for that trait
newdf <- F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
head(newdf)
#Data frame with the new column "trait" normalized with the controls for that trait
newdf2 <- F2(R18, T_Rust, mean_trait = mean(R18$T_Rust))
head(newdf2)
library(metan)
library(readxl)
library(tidyverse)
library(ggstatsplot)
library(hrbrthemes)
R18 <- read_excel("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/Ensayocampo2018.xlsx", sheet = "RawData", col_types =
c("text", #ENV
"numeric", #REP
"numeric", #BLOCK
"numeric", #ROW
"text", #GEN
"numeric", #GERM
"numeric", #BIOM
"numeric", #BIOM_PL
"numeric", #YIELD
"numeric", #YIELD_PL
"numeric", #BIOM/YIELD
"numeric", #Rust in %
"numeric", #Dtf
"numeric", #DtFP
"numeric", #DtP
"numeric", #Ascochyta in %
"numeric"  #Oidio in %
))
#Data frame with the new column "trait" normalized with the controls for that trait
newdf2 <- F2(R18, T_Rust, mean_trait = mean(R18$T_Rust))
head(newdf2)
library(metan)
library(readxl)
library(tidyverse)
library(ggstatsplot)
library(hrbrthemes)
R18 <- read_excel("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/Ensayocampo2018.xlsx", sheet = "RawData", col_types =
c("text", #ENV
"numeric", #REP
"numeric", #BLOCK
"numeric", #ROW
"text", #GEN
"numeric", #GERM
"numeric", #BIOM
"numeric", #BIOM_PL
"numeric", #YIELD
"numeric", #YIELD_PL
"numeric", #BIOM/YIELD
"numeric", #Rust in %
"numeric", #Dtf
"numeric", #DtFP
"numeric", #DtP
"numeric", #Ascochyta in %
"numeric"  #Oidio in %
))
#Data frame with the new column "trait" normalized with the controls for that trait
newdf2 <- F2(R18, T_Rust, mean_trait = mean(R18$T_Rust))
head(newdf2)
#Data frame with the new column "trait" normalized with the controls for that trait
newdf <- F2(R18, T_Germ, mean_trait = mean(R18$T_Germ))
head(newdf)
mean(R18$T_Rust)
R18$T_Rust
library(metan)
library(readxl)
library(tidyverse)
library(ggstatsplot)
library(hrbrthemes)
R18 <- read_excel("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/Ensayocampo2018.xlsx", sheet = "RawData", col_types =
c("text", #ENV
"numeric", #REP
"numeric", #BLOCK
"numeric", #ROW
"text", #GEN
"numeric", #GERM
"numeric", #BIOM
"numeric", #BIOM_PL
"numeric", #YIELD
"numeric", #YIELD_PL
"numeric", #BIOM/YIELD
"numeric", #Rust in %
"numeric", #Dtf
"numeric", #DtFP
"numeric", #DtP
"numeric", #Ascochyta in %
"numeric"  #Oidio in %
))
#Data frame with the new column "trait" normalized with the controls for that trait
newdf2 <- F2(R18, T_Rust, mean_trait = mean(R18$T_Rust))
head(newdf2)
