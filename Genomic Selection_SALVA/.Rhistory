load('dat_ls.RData',verbose=TRUE)
load('dat_ls.RData',verbose=TRUE)
load('dat_ls.RData',verbose=TRUE)
#load('dat_ls.RData',verbose=TRUE)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1"))
#dat_F = dat_ls$dat_F
#head(dat_F)
head(pheno)
Y = as.matrix(pheno[,-(1:2)])
View(Y)
pheno$ENV = as.character(pheno$ENV)
G = pheno$GEN
J = dim(G)[1]
J
dim(G)
G = pheno$GEN
G
dim(G)
XE = matrix(model.matrix(~0+ENV,data=pheno)[,-1],nc=1)
View(XE)
Z = model.matrix(~0+GEN,data=pheno)
K = Z%*%G%*%t(Z)
G = as.matrix(read.xlsx("GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
G = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
J = dim(G)[1]
XE = matrix(model.matrix(~0+ENV,data=pheno)[,-1],nc=1)
Z = model.matrix(~0+GEN,data=pheno)
K = Z%*%G%*%t(Z)
View(K)
#Partitions for a 5-FCV
PT_ls = CV.KFold(pheno, DataSetID='GEN',K=5,set_seed = 123)
PT_ls = PT_ls$CrossValidation_list
#Predictor BGLR
ETA = list(list(X=XE,model='FIXED'),list(K=K,model='RKHS'))
#Function to summarize the performance prediction: PC_MM_f
source('PC_MM.R')#See below
#Function to summarize the performance prediction: PC_MM_f
source('PC_MM.R')#See below
Tab = data.frame()
set.seed(1)
Tab = data.frame()
set.seed(1)
PC_MM_f<-function(y,yp,ENV=NULL)
{
if(is.null(ENV))
{
Cor = diag(cor(as.matrix(y),as.matrix(yp)))
MSEP = colMeans((y-yp)^2)
PC = data.frame(Trait = colnames(y),Cor=Cor, MSEP=MSEP)
}
else
{
PC = data.frame()
ENVs = unique(ENV)
nE = length(ENVs)
for(e in 1:nE)
{
y_e = y[ENV==ENVs[e],]
yp_e = yp[ENV==ENVs[e],]
Cor = diag(cor(as.matrix(y_e),as.matrix(yp_e)))
MSEP = colMeans((y_e-yp_e)^2)
PC = rbind(PC,data.frame(Trait = colnames(y),ENV=ENVs[e],Cor=Cor,
MSEP=MSEP))
}
}
PC
}
Tab = data.frame()
set.seed(1)
for(p in 1:5)
{
Y_NA = Y
Pos_NA = PT_ls[[p]]
Y_NA[Pos_NA,] = NA
A = Multitrait(y = Y_NA, ETA=ETA,
resCov = list( type = 'UN', S0 = diag(2), df0 = 5 ),
nIter = 5e3, burnIn = 1e3)
PC = PC_MM_f(Y[Pos_NA,],A$yHat[Pos_NA,],ENV=dat_F$ENV[Pos_NA])
Tab = rbind(Tab,data.frame(PT=p,PC))
cat('PT=',p,'\n')
}
View(Y)
for(p in 1:5)
{
Y_NA = Y
Pos_NA = PT_ls[[p]]
Y_NA[Pos_NA,] = NA
A = Multitrait(y = Y_NA, ETA=ETA,
resCov = list( type = 'UN', S0 = diag(2), df0 = 5 ),
nIter = 5e3, burnIn = 1e3)
PC = PC_MM_f(Y[Pos_NA,],A$yHat[Pos_NA,],ENV=pheno$ENV[Pos_NA])
Tab = rbind(Tab,data.frame(PT=p,PC))
cat('PT=',p,'\n')
}
View(K)
View(Z)
View(XE)
#load('dat_ls.RData',verbose=TRUE)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 2"))
View(G)
View(Z)
BME(
Y = pheno, #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
BME(
Y = pheno, #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = 2, # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
Z = model.matrix(~0+GEN,data=pheno)
View(Z)
BME(
Y = pheno, #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T, sheet = "Sheet 2"))
View(Z)
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T, sheet = "Sheet 2"))
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T, sheet = "Sheet 2"))
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, sheet = "Sheet 2"))
View(Z)
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx",rowNames = T, colNames = T, sheet = "Sheet 2"))
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx",rowNames = T, colNames = T, sheet = "Sheet 2"))
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx",rowNames = F, colNames = F, sheet = "Sheet 2"))
View(Z)
Z = as.matrix(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx",rowNames = F, colNames = F, sheet = "Sheet 2"))
View(Z)
BME(
Y = pheno, #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
head(pheno)
BME(
Y = as.matrix(pheno), #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
#load('dat_ls.RData',verbose=TRUE)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1"))
head(pheno)
pheno[,3]
BME(
Y = as.matrix(pheno[,3]), #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
as.matrix(pheno[,3])
BME(
Y = as.matrix(pheno[,3]), #(matrix) Phenotypic response where each column is a different environment.
Z1 = Z, # (matrix) Matrix design for the genetic effects.
nIter = 1000L, #(integer) Number of iterations to fit the model.
burnIn = 300L, #(integer) Number of items to burn at the beginning of the model.
thin = 2L, #(integer) Number of items to thin the model.
bs = ceiling(dim(Z1)[2]/6), # (integer) Number of groups.
parallelCores = 1, #(integer) Number of cores to use.
digits = 4, #(integer) Number of digits of accuracy in the results.
progressBar = TRUE, #(Logical) Show the progress bar.
testingSet = NULL #(object or vector) Crossvalidation object or vector with the positions to use like testing in a cross-validation test.
)
pheno <- data.frame(read.xlsx("multuENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
View(geno)
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
pheno[, 2:3]
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'EBU', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
dataset <- pheno[, 2:3] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'EBU', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'CC', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
View(ZG)
View(Z.G)
View(LG)
write.xlsx(LG, "cholesky_geno.xlsx")
View(LG)
write.xlsx(LG, "cholesky_geno.xlsx")
write.table(LG, "cholesky_geno.txt")
write.table(LG, "cholesky_geno.txt", sep = "/t")
write.table(LG, "cholesky_geno.txt", sep = "\t")
write.csv(LG, "cholesky_geno.txt", sep = "\t")
write.csv(LG, "cholesky_geno.txt", sep = "\t")
write.csv(LG, "cholesky_geno.txt", sep = "_")
Z.G <- as.matrix(read.xlsx("LG.xlsx", rowNames = T, colNames = T))
Z.G <- as.matrix(read.xlsx("LG.xlsx", rowNames = F, colNames = F))
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'CC', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
dataset
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
dataset
phenoMaizeToy[, 2:5]
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BayesB', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
phenoMaizeToy
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
length(dataset)
length(dataset) == 1
length(phenoMaizeToy[, 2:5]) == 1
data('MaizeToy')
phenoMaizeToy <- phenoMaizeToy[order(phenoMaizeToy$Env, phenoMaizeToy$Line),]
phenoMaizeToy
#Matrix design
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'EBU', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
names(pm)
length(dataset)
length(dataset) ==1
Z.G <- as.matrix(read.xlsx("LG.xlsx", rowNames = F, colNames = F))
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = '', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset$Rust, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
class(dataset)
dataset <- pheno[, 2:3] #Must Include in the first column the environments
class(dataset)
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
summary(dataset)
dataset <- pheno[, 2:3] #Must Include in the first column the environments
summary(dataset)
dataset <- pheno[, 2:3] #Must Include in the first column the environments
dataset$Rust <- as.numeric(dataset$Rust)
summary(dataset)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
class(dataset)
summary(dataset)
length(dataset) == 1
names(pm)
BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = '', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = '', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Matrix design
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
length(Z.G)
length(ETA)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
Z.G <- as.matrix(read.xlsx("LG.xlsx", rowNames = F, colNames = F))
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
View(ETA)
#Matrix design
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
View(ETA)
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
dataset
Z.G <- as.matrix(read.xlsx("LG.xlsx", rowNames = F, colNames = F))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
dataset$Rust <- as.numeric(dataset$Rust)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = '', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
View(ETA)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
dataset
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
dataset
#Matrix design
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
length(ETA)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- phenoMaizeToy[, 2:5] #Must Include in the first column the environments
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'EBU', ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = c("KTI",'EBU'), ETA = ETA, covModel = 'BRR', nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
length(dataset) == 1
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
dataset <- pheno[, 2:3] #Must Include in the first column the environments
dataset$Rust <- as.numeric(dataset$Rust)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
dataset <- pheno[, 2:4] #Must Include in the first column the environments
dataset$Rust <- as.numeric(dataset$Rust)
dataset$Rust2 <- as.numeric(dataset$Rust2)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'CC', ETA = ETA, covModel = , nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BL'))
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BL'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'CC', ETA = ETA, covModel = "BL", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BL", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BL'))
dataset <- pheno[, 2:4] #Must Include in the first column the environments
dataset$Rust2 <- as.numeric(dataset$Rust2)
dataset$Rust <- as.numeric(dataset$Rust)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BL", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BRR", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BRR", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BayesB'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BayesB", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BayesA'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BayesA", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BayesC'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BayesC", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'GBLUP'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "GBLUP", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BRR", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
#Linear Predictor
ETA <- list(Gen = list(X = Z.G, model = 'BRR'))
#Check predictive capacities of the model
pm <- BMORS_Env(dataset, testingEnv = 'R19', ETA = ETA, covModel = "BRR", nIter = 10000,
burnIn = 5000, thin = 2, progressBar = FALSE, digits = 3)
summary(pm)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 2", colNames = T))
#Matrix design
geno <- data.frame(read.xlsx("data/GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 1", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(pheno$GEN))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(pheno[, -c(1)])
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
#Pheno data
Y <- as.matrix(pheno[, -c(1)])
Y
pheno <- data.frame(read.xlsx("multiENV_rust.xlsx", sheet = "Sheet 1", colNames = T))
#Pheno data
Y <- as.matrix(pheno[, -c(1:3)])
Y
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
