nds.no_noise.FAI2$phenos
Pheno_rust_df$I_cc_FAI
nds.no_noise.FAI2<- createNoisyDataset(
name = 'FAI2, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$I_cc_FAI)
nds.no_noise.FAI2$phenos
nds.no_noise.FAI2
wb5
nds.no_noise.R19
res.BL.rrBLUP = GROAN.run(nds = nds.no_noise.FAI2, wb = wb5, nds.test = nds.no_noise.R19)
plotResult(res.BL.rrBLUP)
res.BL.rrBLUP %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res.BL.rrBLUP %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res.BL.rrBLUP %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = median(pearson))
my.pheno = Pheno_rust_df$I_cc_FAI
my.pheno[160:320] = NA
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_rust_SVDI)
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
print(names(res1))
plot(
Pheno_rust_df$R19[160:320], xlab = "Real values",
y = res1$predictions[160:320], ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
abline(a=0, b=1) #adding first quadrant bisector, for reference
plot(
x = Pheno_rust_df$R19[160:320], xlab = "Real values",
y = res1$predictions[160:320], ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
my.pheno = Pheno_rust_df$I_cc_FAI
my.pheno[1:160] = NA
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
print(names(res1))
plot(
x = Pheno_rust_df$R19[1:160], xlab = "Real values",
y = res1$predictions[1:160], ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
my.pheno = Pheno_rust_df$I_cc_FAI
my.pheno[1:160] = NA
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
print(names(res1))
plot(
x = Pheno_rust_df$I_cc_FAI[1:160], xlab = "Real values",
y = res1$predictions[1:160], ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
my.pheno = Pheno_rust_df$I_cc_FAI
my.pheno[160:320] = NA
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
print(names(res1))
plot(
x = Pheno_rust_df$I_cc_FAI[160:320], xlab = "Real values",
y = res1$predictions[160:320], ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$I_cc_FAI[160:320],res1$predictions[160:320])
cor(Pheno_rust_df$R19[160:320],res1$predictions[160:320])
plot(
x = Pheno_rust_df$R19, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
cor(Pheno_rust_df$R19,res1$predictions)
my.pheno = Pheno_rust_df$I_cc_FAI
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
print(names(res1))
plot(
x = Pheno_rust_df$R19, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$R19,res1$predictions)
res1 = phenoRegressor.BGLR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
res1 = phenoRegressor.BGLR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI, covariances = NULL)
res1 = phenoRegressor.BGLR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI, type = "BL")
res1 = phenoRegressor.BGLR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI, type = "BL", covariances = NULL)
library(randomForest)
res1 = phenoRegressor.RFR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
res1 = phenoRegressor.RFR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI, covariances = NULL)
res1 = phenoRegressor.RFR(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI, covariances = NULL, extraCovariates = NULL)
my.pheno = Pheno_rust_df$I_cc_FAI
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
plot(
x = Pheno_rust_df$R19, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$R19,res1$predictions)
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
plot(
x = Pheno_rust_df$R19, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$R19,res1$predictions)
plot(
x = Pheno_rust_df$I_cc_FAI, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$I_cc_FAI,res1$predictions)
my.pheno = Pheno_rust_df$I_cc_FAI
res1 = phenoRegressor.rrBLUP(phenotypes = my.pheno, genotypes = DArT_GROAN_SVDI)
plot(
x = Pheno_rust_df$R19, xlab = "Real values",
y = res1$predictions, ylab = "Predicted values")
abline(a=0, b=1) #adding first quadrant bisector, for reference
cor(Pheno_rust_df$I_cc_FAI,res1$predictions)
cor(Pheno_rust_df$R19,res1$predictions)
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19)
cor(Pheno_rust_df$R19t,res1$predictions)
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19t)
cor(Pheno_rust_df$R19,res1$predictions)
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19)
cor(Pheno_rust_df$R19,res1$predictions, method = "s")
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19, method = "s")
cor(Pheno_rust_df$R19,res1$predictions, method = "k")
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19, method = "k")
cor(Pheno_rust_df$R19,res1$predictions)
cor(Pheno_rust_df$I_cc_FAI,Pheno_rust_df$R19)
0.3129765-0.2987677
cor(Pheno_rust_df$DS,Pheno_rust_df$R19)
View(res)
View(res.1)
View(res.2)
plotResult(predictors19, variable = "pearson")
ggplot(df_index, aes(x= Trait, y = Accuracy)) +
geom_boxplot(aes(fill = Trait)) +
coord_flip() +
labs(title = "Accuracy by single trait or indices",
subtitle = "500 itinerances, 70% training 30% testing",
caption = "FAI 1 = With LP50, FAI 2 = Without LP50") +
theme_bw() +
theme(legend.position = "none")
View(res.FAI2)
View(res.DS)
print(wb5)
print(wb5)
print(wb2)
res.total <- read.xlsx(xlsxFile = "/results/BL_vs_rrBLUP_IndexDS.xlsx")
res.total %>%
group_by(regressor) %>%
summarise("meanP" = median(pearson))
plotResult(res.total, variable = "pearson") #No differences between regressor
ggbetweenstats(data = res.total, x = regressor, y = pearson, type = "p", pairwise.comparisons = T,
p.adjust.method = "holm", k = 4)
#putting the results best index together for further analysis
res.total = rbind(res.no_noise.FAI2.bl, res.no_noise.FAI2)
#train model with the index and test in field:
#R18
nds.no_noise.R18<- createNoisyDataset(
name = 'R18, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$R18)
#R19
nds.no_noise.R19<- createNoisyDataset(
name = 'R19, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$R19)
#R20
nds.no_noise.R20<- createNoisyDataset(
name = 'R20, no noise',
genotypes = DArT_GROAN_SVDI,
phenotypes = Pheno_rust_df$R20)
print(wb5)
plotResult(res.BL.rrBLUP)
Pheno_rust_df$I_cc_FAI
res.no_noise.AUDPC <- GROAN.run(nds.no_noise.AUDPC, wb5)
res.no_noise.DS <- GROAN.run(nds.no_noise.DS, wb5)
res.no_noise.FAI2 <- GROAN.run(nds.no_noise.FAI2, wb5)
res.no_noise.IF <- GROAN.run(nds.no_noise.IF, wb5)
res.no_noise.IT <- GROAN.run(nds.no_noise.IT, wb5)
res.no_noise.LP50 <- GROAN.run(nds.no_noise.LP50, wb5)
res.no_noise.R18 <- GROAN.run(nds.no_noise.R18, wb5)
res.no_noise.R19 <- GROAN.run(nds.no_noise.R19, wb5)
res.no_noise.R20 <- GROAN.run(nds.no_noise.R20, wb5)
res.total2 <- data.frame(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.LP50, res.no_noise.R18, res.no_noise.R19, res.no_noise.R20)
plotResult(res.total2)
res.total2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
View(res.total2)
res.no_noise.DS
res.total2 <- data.frame(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.LP50, res.no_noise.R18, res.no_noise.R19, res.no_noise.R20)
plotResult(res.total2)
res.total2
summary(res.total2)
res.total2 <- cbind(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.LP50, res.no_noise.R18, res.no_noise.R19, res.no_noise.R20)
res.total2 <- rbind(res.no_noise.AUDPC, res.no_noise.DS, res.no_noise.FAI2, res.no_noise.IF, res.no_noise.IT,
res.no_noise.LP50, res.no_noise.R18, res.no_noise.R19, res.no_noise.R20)
summary(res.total2)
plotResult(res.total2)
write.xlsx(res.total2, "results/field&CC_traits_twomodels.xlsx")
res.total2 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res.multimodel %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
res.BL.rrBLUP %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
test.rrblup <- test1 %>%
group_by(dataset.train, dataset.test) %>%
summarise("meanPA" = (mean(pearson)))
test.rrblup
wb3
test.rrblup
0.314/0.264
View(test.rrblup)
print(wb)
print(wb2)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
outfolder = "/results",
saveHyperParms=F,
saveExtraData = F,
type = 'BL',
stratified = T,
reps = 50,
folds = 10)
print(wb2)
wb2 <- createWorkbench(phenoRegressor.BGLR,
regressor.name = 'Bayesian Lasso',
outfolder = "/results",
saveHyperParms=F,
saveExtraData = F,
type = 'BL',
stratified = T,
reps = 15,
folds = 10)
print(wb2)
res.DStoR19 <- GROAN.run(nds = nds.no_noise.DS, wb = wb2, nds.test = nds.no_noise.R19)
plotResult(res.DStoR19)
res.DStoR19 %>%
group_by(dataset.train, dataset.test, regressor) %>%
summarise("meanPA" = mean(pearson))
write.xlsx(res.DStoR19, "results/res.DStoR19_BL.xlsx")
#MULTI ENVIRONMENT
install.packages("BMTME")
library(BMTME)
#EXAMPLE:
data("WheatMadaToy")
View(phenoMada)
#EXAMPLE:
data("WheatMadaToy")
WheatMadaToy
phenoMada <- (phenoMada[order(phenoMada$GID),])
#Matrix design
LG <- cholesky(genoMada)
View(LG)
#Matrix design
LG <- cholesky(genoMada)
ZG <- model.matrix(~0 + as.factor(phenoMada$GID))
View(ZG)
Z.G <- ZG %*% LG
View(Z.G)
View(Pheno_rust_df)
View(Pheno_rust)
Pheno_rust_df[,0]
Pheno_rust_df[0,]
Pheno_rust_df[,0]
Pheno_rust_df[,0]
ff=Pheno_rust_df[,0]
ff
View(ff)
Pheno_rust[,0]
View(Pheno_rust)
multiENV_rust <- as.matrix(Pheno_rust[,0], Pheno_rust[,2], Pheno_rust[,13])
multiENV_rust
View(multiENV_rust)
multiENV_rust <- matrix(Pheno_rust[,0], Pheno_rust[,2], Pheno_rust[,13])
View(multiENV_rust)
Pheno_rust[,0]
Pheno_rust[,2]
Pheno_rust[,13]
multiENV_rust <- matrix(Pheno_rust[,2], Pheno_rust[,13])
multiENV_rust
View(multiENV_rust)
#Pheno data
Y <- as.matrix(phenoMada[, -c(1)])
Y
phenoMada[, 3]
Y
Z.G
LG
View(LG)
View(ZG)
phenoMada
str(phenoMada)
View(Pheno_rust_df)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = T, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = T, colNames = F, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
head(Pheno_rust)
Pheno_rust_df <- as.data.frame(Pheno_rust)
head(Pheno_rust_df)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, R19, I_cc_FAI)
multiENV_rust
genoMada
view(genoMada)
str(genoMada)
#Matrix design
geno <- read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T)
geno
view(geno)
LG <- cholesky(geno)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
LG <- cholesky(geno)
str(geno)
str(genoMada)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
str(geno)
view(geno)
LG <- cholesky(geno)
multiENV_rust
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
Y
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
#Matrix design
LG <- cholesky(genoMada)
ZG <- model.matrix(~0 + as.factor(phenoMada$GID))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(phenoMada[, -c(1)])
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
View(fm)
Y
Z.G
multiENV_rust <- Pheno_rust_df %>%
select(GEN, R19, I_cc_FAI)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 320)
Y
Z.G
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 320)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 160)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 640)
Pheno_rust_df
multiENV_rust <- Pheno_rust_df %>%
select(GEN, AUDPC, IF, IT, DS)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
phenoMada <- (phenoMada[order(phenoMada$GID),])
#Matrix design
LG <- cholesky(genoMada)
ZG <- model.matrix(~0 + as.factor(phenoMada$GID))
Z.G <- ZG %*% LG
#Pheno data
Y <- as.matrix(phenoMada[, -c(1)])
view(Y)
view(Z1)
view(Z.G)
view(phenoMada)
view(ZG)
view(LG)
dim(LG)
dim(ZG)
dim(Z.G)
dim(Y)
dim(phenoMada)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, AUDPC, IF, IT, DS)
dim(multiENV_rust)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
LG <- cholesky(geno)
dim(LG)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
dim(ZG)
Z.G <- ZG %*% LG
dim(Z.G)
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
dim(Y)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 4, bs = 50)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 3, bs = 50)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 1, bs = 50)
view(geno)
view(ZG)
ZG1 <- model.matrix(~0 + as.factor(phenoMada$GID))
view(ZG1)
phenoMada <- (phenoMada[order(phenoMada$GID),])
dim(phenoMada)
#Matrix design
LG <- cholesky(genoMada)
dim(LG)
ZG1 <- model.matrix(~0 + as.factor(phenoMada$GID))
dim(ZG)
multiENV_rust <- (multiENV_rust[order(multiENV_rust$GEN),])
head(multiENV_rust)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
LG <- cholesky(geno)
dim(LG)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
dim(ZG)
Z.G <- ZG %*% LG
dim(Z.G)
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
dim(Y)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, AUDPC, IF, IT, DS)
head(multiENV_rust)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, R19, I_cc_FAI)
head(multiENV_rust)
write.xlsx(multiENV_rust, "multiENV_rust.xlsx")
multiENV_rust <- data.frame(read.xlsx("multiENV_rust.xlsx"))
multiENV_rust
#BMTSE
multiENV_rust <- data.frame(read.xlsx("multiENV_rust.xlsx")) #pheno data
head(multiENV_rust)
#BMTSE
multiENV_rust <- data.frame(read.xlsx("multiENV_rust.xlsx")) #pheno data
head(multiENV_rust)
LG <- cholesky(geno)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
Z.G <- ZG %*% LG
Z.E <- model.matrix(~0 + as.factor(multiENV_rust$ENV))
ZEG <- model.matrix(~0 + as.factor(multiENV_rust$GEN):as.factor(multiENV_rust$ENV))
G2 <- kronecker(diag(length(unique(multiENV_rust$ENV))), data.matrix(geno))
LG2 <- cholesky(G2)
Z.EG <- ZEG %*% LG2
Y <- as.matrix(multiENV_rust[, -c(1, 2)])
fm <- BMTME(Y = Y, X = Z.E, Z1 = Z.G, Z2 = Z.EG, nIter =15000, burnIn =10000, thin = 2,bs = 50)
dim(Z.E)
str(Y)
str(Z.E)
view(Z.E)
fm <- BMTME(Y = Y, X = Z.E, Z1 = Z.G, Z2 = Z.EG, nIter =15000, burnIn =10000, thin = 2,bs = 50)
dim(Z.E)
dim(Y)
dim(Z.G)
dim(Z.EG)
dim(ZEG)
fm <- BMTME(Y = Y, X = Z.E, Z1 = Z.G, Z2 = Z.EG, nIter =15000, burnIn =10000, thin = 2,bs = 50)
#example:
phenoMaizeToy<-(phenoMaizeToy[order(phenoMaizeToy$Env,phenoMaizeToy$Line),])
rownames(phenoMaizeToy)=1:nrow(phenoMaizeToy)
head(phenoMaizeToy)
view(phenoMaizeToy)
LG <- cholesky(genoMaizeToy)
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
ZEG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line):as.factor(phenoMaizeToy$Env))
G2 <- kronecker(diag(length(unique(phenoMaizeToy$Env))), data.matrix(genoMaizeToy))
LG2 <- cholesky(G2)
Z.EG <- ZEG %*% LG2
Y <- as.matrix(phenoMaizeToy[, -c(1, 2)])
Z.E
Z.E <- model.matrix(~0 + as.factor(multiENV_rust$ENV))
Z.E
dim(Z.E)
ZEG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line):as.factor(phenoMaizeToy$Env))
dim(Z.E)
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
dim(Z.E)
head(phenoMaizeToy)
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
ZEG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line):as.factor(phenoMaizeToy$Env))
G2 <- kronecker(diag(length(unique(phenoMaizeToy$Env))), data.matrix(genoMaizeToy))
LG2 <- cholesky(G2)
Z.EG <- ZEG %*% LG2
Y <- as.matrix(phenoMaizeToy[, -c(1, 2)])
fm <- BMTME(Y = Y, X = Z.E, Z1 = Z.G, Z2 = Z.EG, nIter =15000, burnIn =10000, thin = 2,bs = 50)
