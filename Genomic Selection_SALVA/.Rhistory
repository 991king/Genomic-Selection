# 3) Impute your data "filling" all the NA's (SVDI)
library(bcv)
# 1) Load Genotypic data, DArT markers:
DArT <- as.matrix(read.table("data/DArT.txt", header = T))
library(openxlsx)
library(rrBLUP)
############################################################################
###                                                                      ###
###                         DATA PREPARATION                             ###
###                                                                      ###
############################################################################
library(openxlsx)
# 1) Load Genotypic data, DArT markers:
DArT <- as.matrix(read.table("data/DArT.txt", header = T))
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA")
# 1) Load Genotypic data, DArT markers:
DArT <- as.matrix(read.table("data/DArT.txt", header = T))
library(BMTME)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "data/BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
#Ahora voy a hacer lo mismo con GROAN intentando 50 rep. de 10 fold cross-validation:
library(GROAN)
Pheno_rust_df <- as.data.frame(Pheno_rust)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, R19, I_cc_FAI)
library(tidyverse)
multiENV_rust <- Pheno_rust_df %>%
select(GEN, R19, I_cc_FAI)
View(multiENV_rust)
head(multiENV_rust)
#Matrix design
geno <- as.matrix(read.xlsx(xlsxFile = "data/GenPea_SilDArT_Kinship_rust.xlsx", colNames = T, rowNames = T))
View(geno)
LG <- cholesky(geno)
View(LG)
ZG <- model.matrix(~0 + as.factor(multiENV_rust$GEN))
dim(ZG)
Z.G <- ZG %*% LG
dim(Z.G)
#Pheno data
Y <- as.matrix(multiENV_rust[, -c(1)])
dim(Y)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
#EXAMPLE:
data("WheatMadaToy")
phenoMada <- (phenoMada[order(phenoMada$GID),])
dim(phenoMada)
#Matrix design
LG <- cholesky(genoMada)
dim(LG)
ZG1 <- model.matrix(~0 + as.factor(phenoMada$GID))
dim(ZG)
Z.G <- ZG %*% LG
dim(Z.G)
#Pheno data
Y <- as.matrix(phenoMada[, -c(1)])
dim(Y)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
data("WheatMadaToy")
phenoMada <- (phenoMada[order(phenoMada$GID),])
dim(phenoMada)
#Matrix design
LG <- cholesky(genoMada)
dim(LG)
ZG1 <- model.matrix(~0 + as.factor(phenoMada$GID))
dim(ZG)
Z.G <- ZG %*% LG
dim(Z.G)
#Pheno data
Y <- as.matrix(phenoMada[, -c(1)])
dim(Y)
# Check fitting
fm <- BME(Y = Y, Z1 = Z.G, nIter = 10000, burnIn = 5000, thin = 2, bs = 50)
#example:
phenoMaizeToy<-(phenoMaizeToy[order(phenoMaizeToy$Env,phenoMaizeToy$Line),])
rownames(phenoMaizeToy)=1:nrow(phenoMaizeToy)
head(phenoMaizeToy)
LG <- cholesky(genoMaizeToy)
ZG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line))
Z.G <- ZG %*% LG
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
ZEG <- model.matrix(~0 + as.factor(phenoMaizeToy$Line):as.factor(phenoMaizeToy$Env))
G2 <- kronecker(diag(length(unique(phenoMaizeToy$Env))), data.matrix(genoMaizeToy))
LG2 <- cholesky(G2)
Z.EG <- ZEG %*% LG2
Y <- as.matrix(phenoMaizeToy[, -c(1, 2)])
fm <- BMTME(Y = Y, X = Z.E, Z1 = Z.G, Z2 = Z.EG, nIter =15000, burnIn =10000, thin = 2,bs = 50)
LG
LG <- t(chol(genoMaizeToy))
View(LG)
LG <- cholesky(genoMaizeToy)
View(LG)
LG <- t(chol(genoMaizeToy))
Y
Y <- as.matrix(phenoMaizeToy[, -c(1, 2)])
Y
Z.E <- model.matrix(~2 + as.factor(phenoMaizeToy$Env))
Z.E <- model.matrix(~Env + data = as.factor(phenoMaizeToy$Env))
Z.E <- model.matrix(~Env,data=dat_F)
Z.E <- model.matrix(~Env,data=as.factor(phenoMaizeToy$Env))
Z.E <- model.matrix(~Env,as.factor(phenoMaizeToy$Env))
Z.E <- model.matrix(~0,as.factor(phenoMaizeToy$Env))
Z.E
View(Z.E)
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
View(Z.E)
Z.E <- model.matrix(~3 + as.factor(phenoMaizeToy$Env))
Z.E <- model.matrix(~0 + as.factor(phenoMaizeToy$Env))
