ENV,
GEN,
REP,
resp = c("GERM", "GDD_F", "GDD_P", "Rust", "Biom_plant_g", "yield_plant_g"),
block = BLOCK
)
Rall_field <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R_all",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_F
"numeric", #GDD_P
"numeric", #Biom_pl_g
"numeric", #yield_pl_g
"numeric", #Rust
"numeric", #Asco
"numeric" #Oidio
))
Rall_field$ENV <- as.factor(Rall_field$ENV)
Rall_field$REP <- as.factor(Rall_field$REP)
Rall_field$BLOCK <- as.factor(Rall_field$BLOCK)
Rall_field$ROW <- as.factor(Rall_field$ROW)
Rall_field$Material <- as.factor(Rall_field$Material)
Rall_field$Species <- as.factor(Rall_field$Species)
Rall_field$Structure <- as.factor(Rall_field$Structure)
Rall_field$GEN <- as.factor(Rall_field$GEN)
#BLUPs
mixed_mod_Rall_field <-
gamem_met(Rall_field,
ENV,
GEN,
REP,
resp = c("GDD_F", "GDD_P", "Rust", "Biom_plant_g", "yield_plant_g"),
block = BLOCK
)
mixed_mod_Rall_field$Rust$BLUPgen
BLUP_flowering <- mixed_mod_Rall_field$GDD_F$BLUPgen
BLUP_flowering <- mixed_mod_Rall_field$GDD_F$BLUPgen
BLUP_poding <- mixed_mod_Rall_field$GDD_P$BLUPgen
BLUP_rust <- mixed_mod_Rall_field$Rust$BLUPgen
BLUP_biomass <- mixed_mod_Rall_field$Biom_plant_g$BLUPgen
BLUP_yield <- mixed_mod_Rall_field$yield_plant_g$BLUPgen
write.table(BLUP_flowering, "BLUP_flowering.txt")
write.xlsx(BLUP_flowering, "BLUP_flowering.xlsx")
write.xlsx(BLUP_poding, "BLUP_poding.xlsx")
write.xlsx(BLUP_rust, "BLUP_rust.xlsx")
write.xlsx(BLUP_biomass, "BLUP_biomass.xlsx")
write.xlsx(BLUP_yield, "BLUP_yield.xlsx")
View(DarT1)
#TASSEL:
DarT <- read.table("Markers.txt",sep= "\t",head=F)
DarT <- data.frame(DarT)
#TASSEL:
DarT <- as.matrix(read.table("Markers.txt",head=F))
#TASSEL:
DarT <- as.matrix(read.table("Markers.txt",head=t))
#TASSEL:
DarT <- as.matrix(read.table("Markers.txt",head=T))
#Substitute 0 to -1 (homozygous minor aa) and  NA to 0 (heterozigosis aA or Aa)
DarT[DarT == 0] <- -1
DarT[is.na(DarT)] <- 0
#TASSEL:
DarT <- as.matrix(read.table("Markers.txt",head=T))
-1
#Substitute 0 to -1 (homozygous minor aa) and  NA to 0 (heterozigosis aA or Aa)
DarT[DarT == 0] <- (-1)
#Substitute 0 to -1 (homozygous minor aa) and  NA to 0 (heterozigosis aA or Aa)
DarT[DarT == 0] <- -1
#TASSEL:
DarT <- as.data.frame(read.table("Markers.txt",head=T))
#Substitute 0 to -1 (homozygous minor aa) and  NA to 0 (heterozigosis aA or Aa)
DarT[DarT == 0] <- -1
DarT[is.na(DarT)] <- 0
write.table(x = DarT, file = "Dart.txt" ,sep= "\t")
DarT1 <- as.matrix(read.xlsx("DarT.xlsx", sep= "\t" ,colNames = T, rowNames = T))
DarT1 <- as.matrix(read.table("Dart.txt", sep= "\t" ,heat = T))
DarT1 <- as.matrix(read.table("Dart.txt", sep= "\t" ,head = T))
DarT1<-DarT1[,-1]
write.table(DarT1, "DarTrrBLUP.txt", sep = "\t")
#Input Genotype. Markers in a matrix format. rows = GEN; column = marker
DarT_rrBLUP <- as.matrix(read.table("DarTrrBLUP.txt", sep= "\t" ,head = T))
View(DarT_rrBLUP)
#Input Genotype. Markers in a matrix format. rows = GEN; column = marker
Markers <- as.matrix(read.table("DarTrrBLUP.txt", sep= "\t" ,head = T))
#Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = T, sheet = "BLUP_field"))
dim(Markers) = dim(Pheno)
dim(Markers)
dim(Pheno)
head(Markers)
head(Pheno)
#Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = T, colNames = T, sheet = "BLUP_field"))
head(Pheno)
#Check Matrix dimensions
dim(Markers)
dim(Pheno)
library(openxlsx)
library(rrBLUP)
impute=A.mat(Markers,max.missing=0.5,impute.method="mean",return.imputed=T)
Markers_impute=impute$imputed
dim(Markers_impute)
#Check Matrix dimensions
dim(Markers)
325*0.6
324*0.4
325*0.4
# 3) Define the training (60 % = 195 genotypes) and validation (40 % = 130 genotypes) populations
train = as.matrix(sample(1:325, 195))
head(train)
test <- setdiff(1:352, train)
test
test <- setdiff(1:325, train)
test
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
# 4) Run mixed.solve() and determine accuracy of predictions
GGD_F = (Pheno_train[, 1])
GGD_F_answer <- mixed.solve(GGD_F, Z = m_train, K = NULL, SE = FALSE, return.Hinv = FALSE)
# 4) Run mixed.solve() and determine accuracy of predictions
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = FALSE, return.Hinv = FALSE)
Flowering = GGD_F_answer$u
head(Flowering)
Flowering = as.matrix(GGD_F_answer$u)
head(Flowering)
pred_flowering_valid = m_valid %*% Flowering
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
pred_flowering # pred. flower. based on the markere ffects of the training population with the grand mean added in
FLW_accuracy = cor(pred_flowering_valid, flowering_valid, use = "complete")
#Determine Correlation Accuracy
#Correlation between the predicted yield values and the observed yield values
flowering_valid = Pheno_valid[, 1]
FLW_accuracy = cor(pred_flowering_valid, flowering_valid, use = "complete")
FLW_accuracy
#Test the other traits
#Poding :
GDD_P = Pheno_train[, 2]
#Test the other traits
#Poding :
GDD_P = Pheno_train[, 2]
GDD_P_answer <- mixed.solve(GDD_P, z = m_train, K = NULL, SE = F, return.Hinv = F)
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
pred_GDD_P_valid = m_valid %*% Poding
GDD_P_valid = Pheno_valid[, 2]
GDD_P_accuracy <- cor(pred_GDD_P_valid, GDD_P_valid, use = "complete")
GDD_P_accuracy
#Rust (in field):
Rust_field = Pheno_train[, 3]
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
pred_Rust_field_valid = m_valid %*% Rust
Rust_field_valid = Pheno_valid[, 3]
Rust_field_accuracy <- cor(pred_Rust_field_valid, Rust_field_valid, use = "complete")
Rust_field_accuracy
#Biomass:
Biomass_ = Pheno_train[, 4]
Biomass_answer <- mixed.solve(Biomass_, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Biomass = Biomass_answer$u
pred_Biomass_valid = m_valid %*% Biomass
Biomass_valid = Pheno_valid[, 4]
Biomass_accuracy <- cor(pred_Biomass_valid, Biomass_valid, use = "complete")
Biomass_accuracy
#Yield:
Yield_ = Pheno_train[, 5]
Yield_answer <- mixed.solve(Yield_, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Yield = Yield_answer$u
pred_Yield_valid = m_valid %*% Yield
Yield_valid = Pheno_valid[, 5]
Yield_accuracy <- cor(pred_Yield_valid, Yield_valid, use = "complete")
Yield_accuracy
##Correlation accuracy with 500 iterations
#Flowering:
traits = 1
cycles = 500
accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,(0.6*325)))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Merkers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = FALSE, return.Hinv = FALSE)
Flowering = as.matrix(GGD_F_answer$u)
pred_flowering_valid = m_valid %*% Flowering
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLW_accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
for (r in 1:cycles) {
train = as.matrix(sample(1:325,(0.6*325)))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = FALSE, return.Hinv = FALSE)
Flowering = as.matrix(GGD_F_answer$u)
pred_flowering_valid = m_valid %*% Flowering
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLW_accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Flowering = GGD_F_answer$u
e = as.matrix(Flowering)
pred_flowering_valid = m_valid %*% e
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
mean(accuracy)
#Rust:
traits = 1
cycles = 500
RUST_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
Rust_field = (Pheno_train[, 3])
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
e = as.matrix(Rust)
pred_Rust_valid = m_valid %*% e
pred_Rust = pred_Rust_valid[, 3] + Rust_field_answer$beta
pred_Rust
Rust_valid = Pheno_valid[, 3]
RUST_accuracy[r, 1] <-  cor(pred_Rust_valid, Rust_valid, use = "complete")
}
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
Rust_field = (Pheno_train[, 3])
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
e = as.matrix(Rust)
pred_Rust_valid = m_valid %*% e
pred_Rust = pred_Rust_valid[, 1] + Rust_field_answer$beta
pred_Rust
Rust_valid = Pheno_valid[, 3]
RUST_accuracy[r, 1] <-  cor(pred_Rust_valid, Rust_valid, use = "complete")
}
mean(RUST_accuracy)
#Poding:
traits = 1
cycles = 500
POD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GGD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid %*% e
pred_poding = pred_poding_valid[, 1] + GGD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy)
#Biomass:
traits = 1
cycles = 500
BMS_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
biomass = (Pheno_train[, 4])
biomass_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
BMS = biomass_answer$u
e = as.matrix(BMS)
pred_biomass_valid = m_valid %*% e
pred_biomass = pred_biomass_valid[, 1] + biomass_answer$beta
pred_biomass
biomass_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_biomass_valid, biomass_valid, use = "complete")
}
mean(BMS_accuracy)
#Yield:
traits = 1
cycles = 500
YLD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
yield = (Pheno_train[, 4])
yield_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
YLD = yield_answer$u
e = as.matrix(YLD)
pred_yield_valid = m_valid %*% e
pred_yield = pred_yield_valid[, 1] + yield_answer$beta
pred_yield
yield_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_yield_valid, yield_valid, use = "complete")
}
mean(YLD_accuracy)
traits = 1
cycles = 500
POD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid %*% e
pred_poding = pred_poding_valid[, 1] + GGD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy)
#Poding:
traits = 1
cycles = 500
POD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid %*% e
pred_poding = pred_poding_valid[, 1] + GGD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy)
#Biomass:
traits = 1
cycles = 500
BMS_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
biomass = (Pheno_train[, 4])
biomass_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
BMS = biomass_answer$u
e = as.matrix(BMS)
pred_biomass_valid = m_valid %*% e
pred_biomass = pred_biomass_valid[, 1] + biomass_answer$beta
pred_biomass
biomass_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_biomass_valid, biomass_valid, use = "complete")
}
mean(BMS_accuracy)
#Yield:
traits = 1
cycles = 500
YLD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
yield = (Pheno_train[, 4])
yield_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
YLD = yield_answer$u
e = as.matrix(YLD)
pred_yield_valid = m_valid %*% e
pred_yield = pred_yield_valid[, 1] + yield_answer$beta
pred_yield
yield_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_yield_valid, yield_valid, use = "complete")
}
mean(YLD_accuracy)
#Poding:
traits = 1
cycles = 500
POD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid %*% e
pred_poding = pred_poding_valid[, 1] + GDD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy)
#Biomass:
traits = 1
cycles = 500
BMS_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
biomass = (Pheno_train[, 4])
biomass_answer <- mixed.solve(biomass, Z = m_train, K = NULL, SE = F, return.Hinv = F)
BMS = biomass_answer$u
e = as.matrix(BMS)
pred_biomass_valid = m_valid %*% e
pred_biomass = pred_biomass_valid[, 1] + biomass_answer$beta
pred_biomass
biomass_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_biomass_valid, biomass_valid, use = "complete")
}
mean(BMS_accuracy)
#Yield:
traits = 1
cycles = 500
YLD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
yield = (Pheno_train[, 4])
yield_answer <- mixed.solve(yield, Z = m_train, K = NULL, SE = F, return.Hinv = F)
YLD = yield_answer$u
e = as.matrix(YLD)
pred_yield_valid = m_valid %*% e
pred_yield = pred_yield_valid[, 1] + yield_answer$beta
pred_yield
yield_valid = Pheno_valid[, 4]
YLD_accuracy[r, 1] <-  cor(pred_yield_valid, yield_valid, use = "complete")
}
mean(YLD_accuracy)
Markers
View(Markers)
View(Pheno)
colnames(Markers)
rownames(Markers)
#Input Genotype. Markers in a matrix format. rows = GEN; column = marker
Markers <- as.matrix(read.table("DarTrrBLUP.txt", sep= "\t" ,head = T))
colnames(Markers)
View(BLUP_yield)
View(BLUP_yield)
length(pred_flowering)
length(flowering_valid)
FLW_accuracy
FLR_accuracy
get_model_data(mixed_mod_Rall_field)
