#Poding:
GDD_P = Pheno_train[, 2]
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
pred_GDD_P_valid = m_valid %*% Poding
GDD_P_valid = Pheno_valid[, 2]
GDD_P_accuracy <- cor(pred_GDD_P_valid, GDD_P_valid, use = "complete")
GDD_P_accuracy
plot(GDD_P_valid, pred_GDD_P_valid)
plot(Rust_field_valid, pred_Rust_field_valid)
#NA markers corrected:
Rust_field = Pheno_train[, 3]
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
pred_Rust_field_valid = m_valid_svd %*% Rust
Rust_field_valid = Pheno_valid[, 3]
Rust_field_accuracy <- cor(pred_Rust_field_valid, Rust_field_valid, use = "complete")
Rust_field_accuracy
plot(Rust_field_valid, pred_Rust_field_valid)
traits = 1
cycles = 500
FLR_accuracy_svd = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_svd = DArT_SVD[train, ]
Pheno_valid = Pheno[test, ]
m_valid_svd = DArT_SVD[test, ]
GDD_F = (Pheno_train[, 3])
GDD_F_answer_svd <- mixed.solve(GDD_F, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
GDD_F_svd = GDD_F_answer_svd$u
e = as.matrix(GDD_F_svd)
pred_GDD_F_valid_svd = m_valid_svd %*% e
pred_GDD_F_svd = pred_GDD_F_valid_svd[, 1] + GDD_F_answer_svd$beta
pred_GDD_F_svd
GDD_F_valid_svd = Pheno_valid[, 3]
FLR_accuracy_svd[r, 1] <-  cor(pred_GDD_F_valid_svd, GDD_F_valid_svd, use = "complete")
}
mean(FLR_accuracy_svd)
#F with NA's corrected:
traits = 1
cycles = 500
FLR_accuracy_svd = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_svd = DArT_SVD[train, ]
Pheno_valid = Pheno[test, ]
m_valid_svd = DArT_SVD[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer_svd <- mixed.solve(GDD_F, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
GDD_F_svd = GDD_F_answer_svd$u
e = as.matrix(GDD_F_svd)
pred_GDD_F_valid_svd = m_valid_svd %*% e
pred_GDD_F_svd = pred_GDD_F_valid_svd[, 1] + GDD_F_answer_svd$beta
pred_GDD_F_svd
GDD_F_valid_svd = Pheno_valid[, 1]
FLR_accuracy_svd[r, 1] <-  cor(pred_GDD_F_valid_svd, GDD_F_valid_svd, use = "complete")
}
mean(FLR_accuracy_svd)
#P with NA's corrected:
traits = 1
cycles = 500
POD_accuracy_svd = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_svd = DArT_SVD[train, ]
Pheno_valid = Pheno[test, ]
m_valid_svd = DArT_SVD[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer_svd <- mixed.solve(GDD_P, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
GDD_P_svd = GDD_P_answer_svd$u
e = as.matrix(GDD_P_svd)
pred_GDD_P_valid_svd = m_valid_svd %*% e
pred_GDD_P_svd = pred_GDD_P_valid_svd[, 1] + GDD_P_answer_svd$beta
pred_GDD_P_svd
GDD_P_valid_svd = Pheno_valid[, 2]
POD_accuracy_svd[r, 1] <-  cor(pred_GDD_P_valid_svd, GDD_P_valid_svd, use = "complete")
}
mean(POD_accuracy_svd)
#B with NA's corrected:
traits = 1
cycles = 500
BMS_accuracy_svd = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_svd = DArT_SVD[train, ]
Pheno_valid = Pheno[test, ]
m_valid_svd = DArT_SVD[test, ]
biomass = (Pheno_train[, 4])
biomass_answer_svd <- mixed.solve(biomass, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
biomass_svd = biomass_answer_svd$u
e = as.matrix(biomass_svd)
pred_biomass_valid_svd = m_valid_svd %*% e
pred_biomass_svd = pred_biomass_valid_svd[, 1] + biomass_answer_svd$beta
pred_biomass_svd
biomass_valid_svd = Pheno_valid[, 4]
BMS_accuracy_svd[r, 1] <-  cor(pred_biomass_valid_svd, biomass_valid_svd, use = "complete")
}
mean(BMS_accuracy_svd)
#Y with NA's corrected:
traits = 1
cycles = 500
YLD_accuracy_svd = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_svd = DArT_SVD[train, ]
Pheno_valid = Pheno[test, ]
m_valid_svd = DArT_SVD[test, ]
yield = (Pheno_train[, 5])
yield_answer_svd <- mixed.solve(yield, Z = m_train_svd, K = NULL, SE = F, return.Hinv = F)
yield_svd = yield_answer_svd$u
e = as.matrix(yield_svd)
pred_yield_valid_svd = m_valid_svd %*% e
pred_yield_svd = pred_yield_valid_svd[, 1] + yield_answer_svd$beta
pred_yield_svd
yield_valid_svd = Pheno_valid[, 5]
YLD_accuracy_svd[r, 1] <-  cor(pred_yield_valid_svd, yield_valid_svd, use = "complete")
}
mean(YLD_accuracy_svd)
plot(pred_yield_valid_svd,yield_valid_svd)
plot(BMS_accuracy_svd, pred_biomass_valid_svd)
plot(pred_biomass_valid_svd, biomass_valid_svd)
plot(pred_GDD_P_valid_svd,GDD_P_valid_svd)
pred_GDD_P_valid_svd
POD_accuracy_svd
boxplot(POD_accuracy_svd)
RUST_accuracy
RUST_accuracy_svd
boxplot(RUST_accuracy_svd)
RUST_accuracy_svd <- as.data.frame(RUST_accuracy_svd)
FLR_accuracy_svd <- as.data.frame(FLR_accuracy_svd)
POD_accuracy_svd <- as.data.frame(POD_accuracy_svd)
BMS_accuracy_svd <- as.data.frame(BMS_accuracy_svd)
YLD_accuracy_svd <- as.data.frame(YLD_accuracy_svd)
library(tidyverse)
df.accuracies <- merge(YLD_accuracy_svd, BMS_accuracy_svd)
View(df.accuracies)
df.accuracies <- merge(YLD_accuracy_svd, BMS_accuracy_svd, all = T)
View(df.accuracies)
df.accuracies <- merge(YLD_accuracy_svd, BMS_accuracy_svd, by = NULL)
View(df.accuracies)
df.accuracies <- merge(YLD_accuracy_svd, BMS_accuracy_svd, by = "row.names")
View(df.accuracies)
df.accuracies1 <- merge(df.accuracies, POD_accuracy_svd, by = "row.names")
View(df.accuracies1)
df.accuracies <- merge(YLD_accuracy_svd, merge(POD_accuracy_svd, BMS_accuracy_svd), by = "row.names")
df.accuracies <- merge(YLD_accuracy_svd, merge(POD_accuracy_svd, BMS_accuracy_svd, by = "row.names"), by = "row.names")
View(df.accuracies)
df.accuracies <- merge(YLD_accuracy_svd, POD_accuracy_svd)
df.accuracies <- merge(YLD_accuracy_svd, POD_accuracy_svd, all = T)
View(df.accuracies)
head(df.accuracies)
head(YLD_accuracy_svd)
head(POD_accuracy_svd)
RUST_accuracy
FLR_accuracy
POD_accuracy
BMS_accuracy
YLD_accuracy
traits = 1
cycles = 500
RUST_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
Rust_field = (Pheno_train[, 3])
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
e = as.matrix(Rust)
pred_Rust_valid = m_valid %*% e
pred_Rust = pred_Rust_valid[, 1] + Rust_field_answer$beta
pred_Rust
Rust_valid = Pheno_valid[, 3]
RUST_accuracy[r, 1] <-  cor(pred_Rust_valid, Rust_valid, use = "complete")
}
mean(RUST_accuracy)
df.accuracies <- data.frame(FLR == FLR_accuracy_svd, POD == POD_accuracy_svd, RUST == RUST_accuracy_svd,
BIOM == BMS_accuracy_svd, YLD = YLD_accuracy_svd)
df.accuracies <- data.frame(FLR = FLR_accuracy_svd, POD = POD_accuracy_svd, RUST = RUST_accuracy_svd,
BIOM = BMS_accuracy_svd, YLD = YLD_accuracy_svd)
View(df.accuracies)
boxplot(df.accuracies)
df.accuracies.svd <- data.frame(FLR = FLR_accuracy_svd, POD = POD_accuracy_svd, RUST = RUST_accuracy_svd,
BIOM = BMS_accuracy_svd, YLD = YLD_accuracy_svd)
boxplot(df.accuracies.svd)
RUST_accuracy
boxplot(data.frame(x = RUST_accuracy, y = RUST_accuracy_svd))
mean(RUST_accuracy)
mean(RUST_accuracy_svd)
mean(RUST_accuracy_svd)
RUST_accuracy_svd
mean(RUST_accuracy_svd$V1)
mean(RUST_accuracy)
head(Pheno)
plot(flowering_valid, pred_flowering)
boxplot(flowering_valid, pred_flowering)
plot(flowering_valid, pred_flowering)
plot(Rust_field_valid, pred_Rust_field_valid)
plot(Rust_field_valid, pred_Rust_field_valid)
boxplot(RUST_accuracy, RUST_accuracy_svd)
RUST_accuracy
RUST_accuracy_svd
boxplot(RUST_accuracy, RUST_accuracy_svd$V1)
boxplot(RUST_accuracy, RUST_accuracy_svd$V1)
boxplot(data.frame(x = RUST_accuracy, y = RUST_accuracy_svd))
FLR_accuracy
RUST_accuracy
traits = 1
cycles = 500
FLR_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Flowering = GGD_F_answer$u
e = as.matrix(Flowering)
pred_flowering_valid = m_valid %*% e
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLR_accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
mean(FLR_accuracy)
traits = 1
cycles = 500
FLR_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Flowering = GDD_F_answer$u
e = as.matrix(Flowering)
pred_flowering_valid = m_valid %*% e
pred_flowering = pred_flowering_valid[, 1] + GGD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLR_accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
mean(FLR_accuracy)
traits = 1
cycles = 500
FLR_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Flowering = GDD_F_answer$u
e = as.matrix(Flowering)
pred_flowering_valid = m_valid %*% e
pred_flowering = pred_flowering_valid[, 1] + GDD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLR_accuracy[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
mean(FLR_accuracy)
boxplot(FLR_accuracy, FLR_accuracy_svd)
FLR_accuracy
FLR_accuracy_svd
mean(FLR_accuracy_svd)
FLR_accuracy_svd
mean(FLR_accuracy_svd$V1)
mean(FLR_accuracy)
traits = 1
cycles = 500
POD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid %*% e
pred_poding = pred_poding_valid[, 1] + GDD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy)
df.accuracies.svd <- data.frame(FLR_accuracy_svd,POD_accuracy_svd,RUST_accuracy_svd,BMS_accuracy_svd, YLD_accuracy_svd)
boxplot(df.accuracies.svd)
df.accuracies.svd
names(df.accuracies.svd) <- c("FLR", "POD", "RUST", "BMS", "YLD")
names(df.accuracies.svd) <- c("FLR", "POD", "RUST", "BMS", "YLD")
boxplot(df.accuracies.svd)
RUST_accuracy
FLR_accuracy
POD_accuracy
BMS_accuracy
traits = 1
cycles = 500
BMS_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
biomass = (Pheno_train[, 4])
biomass_answer <- mixed.solve(biomass, Z = m_train, K = NULL, SE = F, return.Hinv = F)
BMS = biomass_answer$u
e = as.matrix(BMS)
pred_biomass_valid = m_valid %*% e
pred_biomass = pred_biomass_valid[, 1] + biomass_answer$beta
pred_biomass
biomass_valid = Pheno_valid[, 4]
BMS_accuracy[r, 1] <-  cor(pred_biomass_valid, biomass_valid, use = "complete")
}
mean(BMS_accuracy)
#Yield:
traits = 1
cycles = 500
YLD_accuracy = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train = Markers[train, ]
Pheno_valid = Pheno[test, ]
m_valid = Markers[test, ]
yield = (Pheno_train[, 4])
yield_answer <- mixed.solve(yield, Z = m_train, K = NULL, SE = F, return.Hinv = F)
YLD = yield_answer$u
e = as.matrix(YLD)
pred_yield_valid = m_valid %*% e
pred_yield = pred_yield_valid[, 1] + yield_answer$beta
pred_yield
yield_valid = Pheno_valid[, 4]
YLD_accuracy[r, 1] <-  cor(pred_yield_valid, yield_valid, use = "complete")
}
mean(YLD_accuracy)
mean(YLD_accuracy_svd)
names(df.accuracies.svd) <- c("FLR.svd", "POD.sva", "RUST.sva", "BMS.svd", "YLD.svd")
boxplot(df.accuracies.svd)
names(df.accuracies.svd) <- c("FLR.svd", "POD.svd", "RUST.svd", "BMS.svd", "YLD.svd")
boxplot(df.accuracies.svd)
df.accuracies <- data.frame(FLR_accuracy,POD_accuracy,RUST_accuracy,BMS_accuracy, YLD_accuracy)
names(df.accuracies) <- c("FLR", "POD", "RUST", "BMS", "YLD")
boxplot(df.accuracies)
write.table(df.accuracies, "df.acuracies.xlsx", sep = "/t")
write.xlsx(df.accuracies, "df.acuracies.xlsx", sep = "/t")
write.xlsx(df.accuracies.svd, "df.acuraciessvd.xlsx", sep = "/t")
df.accuracies <- read.xlsx("df.acuraciessvd.xlsx", sep = "/t", colNames = T)
df.accuracies <- read.xlsx("df.acuraciessvd.xlsx", colNames = T)
ggplot(df.accuracies, aes(x = trait, y = Accuracy))+
geom_boxplot(Condition)
ggplot(df.accuracies, aes(x = trait, y = Accuracy))+
geom_boxplot(aes(Condition))
ggplot(df.accuracies, aes(x = trait, y = Accuracy))+
geom_boxplot(aes(fill = Condition))
ggplot(df.accuracies, aes(x = Trait, y = Accuracy))+
geom_boxplot(aes(fill = Condition))
DArT
# 2) Impute missing markers using A.mat() en DArT:
impute = A.mat(DArT,max.missing = 0.5,impute.method = "mean", return.imputed = T)
dim(Markers_impute) #There's no NA's in the input markers matrix
Markers_impute = impute$imputed
dim(Markers_impute) #There's no NA's in the input markers matrix
dim(Pheno)
dim(Markers)
Markers_impute <- t(Markers_impute)
dim(Markers_impute) #There's no NA's in the input markers matrix
#Rust:
traits = 1
cycles = 500
RUST_accuracy_m = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_m = Markers_impute[train, ]
Pheno_valid = Pheno[test, ]
m_valid_m = Markers_impute[test, ]
Rust_field = (Pheno_train[, 3])
Rust_field_answer <- mixed.solve(Rust_field, Z = m_train_m, K = NULL, SE = F, return.Hinv = F)
Rust = Rust_field_answer$u
e = as.matrix(Rust)
pred_Rust_valid = m_valid_m %*% e
pred_Rust = pred_Rust_valid[, 1] + Rust_field_answer$beta
pred_Rust
Rust_valid = Pheno_valid[, 3]
RUST_accuracy_m[r, 1] <-  cor(pred_Rust_valid, Rust_valid, use = "complete")
}
mean(RUST_accuracy_m)
View(Markers_impute)
#Flowering:
traits = 1
cycles = 500
FLR_accuracy_m = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_m = Markers_impute[train, ]
Pheno_valid = Pheno[test, ]
m_valid_m = Markers_impute[test, ]
GDD_F = (Pheno_train[, 1])
GDD_F_answer <- mixed.solve(GDD_F, Z = m_train_m, K = NULL, SE = F, return.Hinv = F)
Flowering = GDD_F_answer$u
e = as.matrix(Flowering)
pred_flowering_valid = m_valid_m %*% e
pred_flowering = pred_flowering_valid[, 1] + GDD_F_answer$beta
pred_flowering
flowering_valid = Pheno_valid[, 1]
FLR_accuracy_m[r, 1] <-  cor(pred_flowering_valid, flowering_valid, use = "complete")
}
mean(FLR_accuracy_m)
#Poding:
traits = 1
cycles = 500
POD_accuracy_m = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_m = Markers_impute[train, ]
Pheno_valid = Pheno[test, ]
m_valid_m = Markers_impute[test, ]
GDD_P = (Pheno_train[, 2])
GDD_P_answer <- mixed.solve(GDD_P, Z = m_train_m, K = NULL, SE = F, return.Hinv = F)
Poding = GDD_P_answer$u
e = as.matrix(Poding)
pred_poding_valid = m_valid_m %*% e
pred_poding = pred_poding_valid[, 1] + GDD_P_answer$beta
pred_poding
poding_valid = Pheno_valid[, 2]
POD_accuracy_m[r, 1] <-  cor(pred_poding_valid, poding_valid, use = "complete")
}
mean(POD_accuracy_m)
#Biomass:
traits = 1
cycles = 500
BMS_accuracy_m = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_m = Markers_impute[train, ]
Pheno_valid = Pheno[test, ]
m_valid_m = Markers_impute[test, ]
biomass = (Pheno_train[, 4])
biomass_answer <- mixed.solve(biomass, Z = m_train_m, K = NULL, SE = F, return.Hinv = F)
BMS = biomass_answer$u
e = as.matrix(BMS)
pred_biomass_valid = m_valid_m %*% e
pred_biomass = pred_biomass_valid[, 1] + biomass_answer$beta
pred_biomass
biomass_valid = Pheno_valid[, 4]
BMS_accuracy_m[r, 1] <-  cor(pred_biomass_valid, biomass_valid, use = "complete")
}
mean_m(BMS_accuracy)
#Yield:
traits = 1
cycles = 500
YLD_accuracy_m = matrix(nrow = cycles, ncol = traits)
for (r in 1:cycles) {
train = as.matrix(sample(1:325,195))
test = setdiff(1:325, train)
Pheno_train = Pheno[train, ]
m_train_m = Markers_impute[train, ]
Pheno_valid = Pheno[test, ]
m_valid_m = Markers_impute[test, ]
yield = (Pheno_train[, 4])
yield_answer <- mixed.solve(yield, Z = m_train_m, K = NULL, SE = F, return.Hinv = F)
YLD = yield_answer$u
e = as.matrix(YLD)
pred_yield_valid = m_valid_m %*% e
pred_yield = pred_yield_valid[, 1] + yield_answer$beta
pred_yield
yield_valid = Pheno_valid[, 4]
YLD_accuracy_m[r, 1] <-  cor(pred_yield_valid, yield_valid, use = "complete")
}
mean(YLD_accuracy_m)
df.accuracies.m <- data.frame(FLR_accuracy_m,POD_accuracy_m,RUST_accuracy_m,BMS_accuracy_m, YLD_accuracy_m)
names(df.accuracies.m) <- c("FLR.m", "POD.m", "RUST.m", "BMS.m", "YLD.m")
write.xlsx(df.accuracies.m, "df.acuraciesm.xlsx", sep = "/t")
df.accuracies <- read.xlsx("df.acuraciessvd.xlsx", colNames = T)
ggplot(df.accuracies, aes(x = Trait, y = Accuracy))+
geom_boxplot(aes(fill = Condition))
