"numeric", #PL50_T log
"numeric", #IF_T square root
"numeric" #DS_T arc.sin
))
RCC_nc$REP <- as.factor(RCC_nc$REP)
RCC_nc$BLOCK <- as.factor(RCC_nc$BLOCK)
RCC_nc$GEN <- as.factor(RCC_nc$GEN)
}
#Three field Seasons together. Data from multi-environment trials
{
Rall_field <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R_all",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_F
"numeric", #GDD_P
"numeric", #Biom_pl_g
"numeric", #yield_pl_g
"numeric", #Rust
"numeric", #Asco
"numeric" #Oidio
))
Rall_field$ENV <- as.factor(Rall_field$ENV)
Rall_field$REP <- as.factor(Rall_field$REP)
Rall_field$BLOCK <- as.factor(Rall_field$BLOCK)
Rall_field$ROW <- as.factor(Rall_field$ROW)
Rall_field$Material <- as.factor(Rall_field$Material)
Rall_field$Species <- as.factor(Rall_field$Species)
Rall_field$Structure <- as.factor(Rall_field$Structure)
Rall_field$GEN <- as.factor(Rall_field$GEN)
}
#season 2019
{
R19_nc <- read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R19_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_FF
"numeric", #GDD_F
"numeric", #GDD_FP
"numeric", #GDD_P
"numeric", #GDD_M
"numeric", #Rust
"numeric", #Biom_pl_g
"numeric" #yield_pl_g
))
R19_nc$ENV <- as.factor(R19_nc$ENV)
R19_nc$REP <- as.factor(R19_nc$REP)
R19_nc$BLOCK <- as.factor(R19_nc$BLOCK)
R19_nc$ROW <- as.factor(R19_nc$ROW)
R19_nc$Material <- as.factor(R19_nc$Material)
R19_nc$Species <- as.factor(R19_nc$Species)
R19_nc$Structure <- as.factor(R19_nc$Structure)
R19_nc$GEN <- as.factor(R19_nc$GEN)
}
R19_nc <- read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R19_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_FF
"numeric", #GDD_F
"numeric", #GDD_FP
"numeric", #GDD_P
"numeric", #GDD_M
"numeric", #Rust
"numeric", #Biom_pl_g
"numeric" #yield_pl_g
))
R19_nc <- read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R19_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_FF
"numeric", #GDD_F
"numeric", #GDD_FP
"numeric", #GDD_P
"numeric", #GDD_M
"numeric", #Rust
"numeric", #Biom_pl_g
"numeric" #yield_pl_g
))
R19_nc$ENV <- as.factor(R19_nc$ENV)
R19_nc$REP <- as.factor(R19_nc$REP)
R19_nc$BLOCK <- as.factor(R19_nc$BLOCK)
R19_nc$ROW <- as.factor(R19_nc$ROW)
R19_nc$Material <- as.factor(R19_nc$Material)
R19_nc$Species <- as.factor(R19_nc$Species)
R19_nc$Structure <- as.factor(R19_nc$Structure)
R19_nc$GEN <- as.factor(R19_nc$GEN)
#season 2020
{
R20_nc <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R20_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_FF
"numeric", #GDD_F
"numeric", #GDD_FP
"numeric", #GDD_P
"numeric", #GDD_M
"numeric", #Rust
"numeric", #Asco
"numeric", #Oidio
"numeric", #Biom_pl_g
"numeric" #yield_pl_g
))
R20_nc$ENV <- as.factor(R20_nc$ENV)
R20_nc$REP <- as.factor(R20_nc$REP)
R20_nc$BLOCK <- as.factor(R20_nc$BLOCK)
R20_nc$ROW <- as.factor(R20_nc$ROW)
R20_nc$Material <- as.factor(R20_nc$Material)
R20_nc$Species <- as.factor(R20_nc$Species)
R20_nc$Structure <- as.factor(R20_nc$Structure)
R20_nc$GEN <- as.factor(R20_nc$GEN)
}
{
R20_nc <- #NoControls
read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R20_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"text", #GEN
"numeric", #GERM
"numeric", #GDD_FF
"numeric", #GDD_F
"numeric", #GDD_FP
"numeric", #GDD_P
"numeric", #GDD_M
"numeric", #Rust
"numeric", #Asco
"numeric", #Oidio
"numeric", #Biom_pl_g
"numeric" #yield_pl_g
))
R20_nc$ENV <- as.factor(R20_nc$ENV)
R20_nc$REP <- as.factor(R20_nc$REP)
R20_nc$BLOCK <- as.factor(R20_nc$BLOCK)
R20_nc$ROW <- as.factor(R20_nc$ROW)
R20_nc$Material <- as.factor(R20_nc$Material)
R20_nc$Species <- as.factor(R20_nc$Species)
R20_nc$Structure <- as.factor(R20_nc$Structure)
R20_nc$GEN <- as.factor(R20_nc$GEN)
}
View(Rall_field)
R18_nc %>%
mutate(Rust_T = asin(sqrt(Rust/100)))
gen_alphaR18 <-
gamem(R18_nc,
GEN,
REP,
resp = c("GERM", "DtF", "DtP", "GDD_F", "GDD_P", "Biom_plant_g", "yield_plant_g", "Asco", "Rust", "Rust_T", "Oidio"),
BLOCK)
R18_nc <- R18_nc %>%
mutate(Rust_T = asin(sqrt(Rust/100)))
gen_alphaR18 <-
gamem(R18_nc,
GEN,
REP,
resp = c("GERM", "DtF", "DtP", "GDD_F", "GDD_P", "Biom_plant_g", "yield_plant_g", "Asco", "Rust", "Rust_T", "Oidio"),
BLOCK)
#write.xlsx(BLUP18, "BLUP18.xlsx", sep = "/t")
get_model_data(gen_alphaR18)
#season 2018
{
R18_nc <- read_excel("C:/Users/Salva/Documents/GitHub/Genomic-Selection/Genomic Selection_SALVA/data/R18_19_20.xlsx",
sheet = "R18_nc",
col_types =
c("text", #ENV
"text", #REP
"text", #BLOCK
"numeric", #ROW
"text", #Specie
"text", #Material
"text", #Structure
"numeric", #GEN
"numeric", #GERM
"numeric", #DtF
"numeric", #DtP
"numeric", #GDD_F
"numeric", #GDD_P
"numeric", #biomass_pl
"numeric", #yield_pl
"numeric", #Asco
"numeric", #Rust
"numeric" #Oidio
))
R18_nc$ENV <- as.factor(R18_nc$ENV)
R18_nc$REP <- as.factor(R18_nc$REP)
R18_nc$BLOCK <- as.factor(R18_nc$BLOCK)
R18_nc$ROW <- as.factor(R18_nc$ROW)
R18_nc$Material <- as.factor(R18_nc$Material)
R18_nc$Species <- as.factor(R18_nc$Species)
R18_nc$Structure <- as.factor(R18_nc$Structure)
R18_nc$GEN <- as.factor(R18_nc$GEN)
}
install.packages("GROAN")
library(GROAN)
## Example data
#arrays of phenotypes
GROAN.KI$yield
GROAN.AI$yield
#dataframes of SNP genotypes
GROAN.KI$SNPs
GROAN.AI$SNPs
#dataframes of realized genotypic kinship
GROAN.KI$kinship
GROAN.AI$kinship
GROAN.KI
## Example data
#arrays of phenotypes
array.KI <- GROAN.KI$yield
## Example data
#arrays of phenotypes
array.KI <- GROAN.KI$yield
array.AI <- GROAN.AI$yield
#dataframes of SNP genotypes
df.gen.KI <- GROAN.KI$SNPs
df.gen.AI <- GROAN.AI$SNPs
#dataframes of realized genotypic kinship
dr.kinship.KI <- GROAN.KI$kinship
#dataframes of realized genotypic kinship
df.kinship.KI <- GROAN.KI$kinship
df.kinship.AI <- GROAN.AI$kinship
array.KI <- GROAN.KI$yield
array.AI <- GROAN.AI$yield
#dataframes of SNP genotypes
df.gen.KI <- GROAN.KI$SNPs
df.gen.AI <- GROAN.AI$SNPs
#dataframes of realized genotypic kinship
df.kinship.KI <- GROAN.KI$kinship
df.kinship.AI <- GROAN.AI$kinship
## Example data
#arrays of phenotypes
yield.KI <- GROAN.KI$yield
yield.AI <- GROAN.AI$yield
#dataframes of SNP genotypes
df.SNP.KI <- GROAN.KI$SNPs
df.SNP.AI <- GROAN.AI$SNPs
#creating a GROAN.NoisyDataset without any extra noise injected
nds.no_noise = createNoisyDataset(
name = 'PEA KI, no noise',
genotypes = df.SNP.KI,
phenotypes = yield.KI
)
#creating a GROAN.NoisyDataset adding noise sampled from a normal distribution
nds.normal_noise = createNoisyDataset(
name = 'PEA KI, normal noise',
genotypes = df.SNP.KI,
phenotypes = yield.KI,
noiseInjector = noiseInjector.norm,
mean = 0,
sd = sd(yield.KI) * 0.5
)
#creating a third dataset, this time with data from the AI lines
nds.no_noise.AI = createNoisyDataset(
name = 'PEA AI, no noise',
genotypes = df.SNP.AI,
phenotypes = yield.AI
)
yield.KI
#plotting the original phenotypes
plot(yield.KI, pch=20, main = 'True (black) vs. Noisy (red)', xlab = 'Samples', ylab = 'Phenotypes')
#plotting an instance of the phenotypes with noise injected
points(getNoisyPhenotype(nds.normal_noise), col='red')
#average correlation oscillates around 0.89
cor(GROAN.KI$yield, getNoisyPhenotype(nds.normal_noise))
cor(GROAN.KI$yield, getNoisyPhenotype(nds.normal_noise))
cor(GROAN.KI$yield, getNoisyPhenotype(nds.normal_noise))
#Obviously in absence of noise no variability is present.
#no noise injector ==> the original phenotypes are returned
all(GROAN.KI$yield == getNoisyPhenotype(nds.no_noise))
#It is possible to invoke both print and summary methods to quickly inspect the created objects
print(nds.no_noise)
print(nds.no_noise.AI)
#creating a Workbench with default values
wb = createWorkbench()
#creating a Workbench with default values
#creating a GROAN.Workbench with default values explicitly assigned
wb = createWorkbench(
#parameters defining crossvalidation
folds = 5, reps = 10, stratified = FALSE,
#parameters defining save-on-hard-disk policy
outfolder = NULL, saveHyperParms = FALSE, saveExtraData = FALSE,
#a regressor
regressor = phenoRegressor.rrBLUP, regressor.name = 'rrBLUP'
)
#It is possible to update the GROAN.Workbench object by adding other regressors using the addRegressor function:
#adding a regressor to an existing Workbench
wb2 = addRegressor(
#the Workbench to be updater
wb,
#the new regressor
regressor = phenoRegressor.BGLR, regressor.name = 'Bayesian Lasso',
#regressor-specific parameters
type = 'BL'
)
#It is possible to update the GROAN.Workbench object by adding other regressors using the addRegressor function:
#adding a regressor to an existing Workbench
wb = addRegressor(
#the Workbench to be updater
wb,
#the new regressor
regressor = phenoRegressor.BGLR, regressor.name = 'Bayesian Lasso',
#regressor-specific parameters
type = 'BL'
)
print(wb)
#For reporting purposes it is possible to collate together (and filter) several result data frames, as shown here:
#executing two GROAN test, same workbench, different datasets
res.no_noise     = GROAN.run(nds.no_noise, wb)
install.packages("BGLR")
library(BGLR)
#For reporting purposes it is possible to collate together (and filter) several result data frames, as shown here:
#executing two GROAN test, same workbench, different datasets
res.no_noise     = GROAN.run(nds.no_noise, wb)
res.normal_noise = GROAN.run(nds.normal_noise, wb)
yield.KI
yield.AI
View(df.SNP.AI)
View(df.kinship.AI)
#putting the results together for further analysis
res.total = rbind(res.no_noise, res.normal_noise)
#defaults is a boxplot of Pearson's correlations
p = plotResult(res.total)
print(p)
#a barplot with 95% confidence interval of Pearson's correlations
p = plotResult(res.total, plot.type = 'bar_conf95')
print(p)
#a barplot of execution times per fold, in seconds
p = plotResult(res.total, plot.type = 'bar', variable = 'time')
print(p)
##Working with strata
#In the following code datasets GROAN.KI and GROAN.AI are put together, and strata are used to separate the two crosses.
#collating the two example datasets
nds.double = createNoisyDataset(
name = 'KI and AI',
genotypes = rbind(GROAN.KI$SNPs, GROAN.AI$SNPs),
phenotypes = c(GROAN.KI$yield, GROAN.AI$yield),
strata = c(rep('KI', 103), rep('AI', ,105)) #we have 103 KI and 105 AI
)
#the workbench will take into account strata
wb = createWorkbench(stratified = TRUE)
#ready to go
res = GROAN.run(nds.double, wb)
plotResult(res, strata = 'single', plot.type = 'bar')
summary(res.no_noise)
summary(res.normal_noise)
plotResult(
res,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("no_strata")
)
plotResult(
res.no_noise,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("no_strata")
)
plotResult(
res.no_noise,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("avg_strata")
)
plotResult(res, strata = 'avg_strata', plot.type = 'bar')
#ready to go
res = GROAN.run(nds.double, wb)
plotResult(res, strata = 'avg_strata', plot.type = 'bar')
summary(res)
setwd("~/GitHub/Rust-collection/data")
#selected genotypes parameters (macro and microscopical)
colonies <- read.xlsx("U_pisi colonies.xlsx")
#selected genotypes parameters (macro and microscopical)
colonies <- read.xlsx("U_pisi colonies.xlsx", sheet = "DEFINITIVO")
corr_plot(colonies)
#selected genotypes parameters (macro and microscopical)
colonies <- read.xlsx("U_pisi colonies.xlsx", sheet = "DEFINITIVO")
corr_plot(colonies)
##Working with strata
#In the following code datasets GROAN.KI and GROAN.AI are put together, and strata are used to separate the two crosses.
#collating the two example datasets
nds.double = createNoisyDataset(
name = 'KI and AI',
genotypes = rbind(GROAN.KI$SNPs, GROAN.AI$SNPs),
phenotypes = c(GROAN.KI$yield, GROAN.AI$yield),
strata = c(rep('KI', 103), rep('AI', ,105)) #we have 103 KI and 105 AI
)
print(p)
plotResult(
res.no_noise,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("avg_strata")
)
plotResult(
res.no_noise,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("none")
)
plotResult(
res.no_noise,
variable = c("pearson"),
x.label = c("both"),
plot.type = c("box"),
strata = c("no_strata")
)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
myG <- read.table("GenPea_SilDArT_sort_def.hmp.txt",sep= "\t",head=FALSE) #import genotype in hapmap format
myG <- read.table("GenPea_SilDArT_sort_def.hmp.txt",sep= "\t",head=FALSE) #import genotype in hapmap format
myG <- read.table(file="GenPea_SilDArT_sort_def.hmp.txt",sep= "\t",head=FALSE) #import genotype in hapmap format
setwd("C:/Users/Salva/Desktop/DOCTORADO NUBE/ENSAYOS/GWAS/Prueba_R")
myG <- read.table(file="GenPea_SilDArT_sort_def.hmp.txt",sep= "\t",head=FALSE) #import genotype in hapmap format
View(myG)
myGD <- read.table(file="GAPIT.Genotype.Numerical.txt",head=T)
myGM <- read.table(file="GAPIT.Genotype.map.txt",head=T)
myGM
View(myGM)
myGD <- read.table(file="GAPIT.Genotype.Numerical.txt",head=T)
myG <- read.table(file="GenPea_SilDArT_sort_def.hmp.txt",sep= "\t",head=FALSE)
myGAPIT <- GAPIT(G=myG, output.numerical=TRUE)
##Prueba a estandarizar datos:
#Librarías:
{
library(plyr)
library(lattice)
library(readr)
library(ggplot2)
#install.packages("GGally")
library(GGally)
library(dplyr)
#install.packages("mlbench")
library(mlbench)
#install.packages("caret")
library(GAPIT3)
}
library(lattice)
library(readr)
library(ggplot2)
#install.packages("GGally")
library(GGally)
library(dplyr)
#install.packages("mlbench")
library(mlbench)
#install.packages("caret")
library(GAPIT3)
myGAPIT <- GAPIT(G=myG, output.numerical=TRUE)
myGD= myGAPIT$GD
myGM= myGAPIT$GM
View(myGD)
View(myGM)
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
write.table("myGD.txt")
write.table(myGD, "myGD.txt", sep = "/t")
write.table(myGD, "myGD.txt", sep = "\t")
print("Yes, I'm sure.")
myGD
View(myGD)
