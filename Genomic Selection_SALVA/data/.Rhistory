#Box 1a. Within-Environment (i.e., stratified) GBLUP (model fitting
rm(list=ls())
library('BGLR')
load("Wheat_GY_47IBWSN_standarized_data.RData")
library(openxlsx)
library(rrBLUP)
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
# 4) Input phenotype. Traits in a matrix format. rows = GEN; column = trait
Pheno_rust <- as.matrix(read.xlsx(xlsxFile = "BLUP_field.xlsx", sep= "\t", rowNames = F, colNames = T, sheet = "BLUP_GS_rust"))
View(Pheno_rust)
Pheno_rust[,1:2]
head(Pheno_rust)
prefix <- paste(colnames(Pheno_rust)[env],"_",sep="")
env <- 3 # choose any number in 1:ncol(Y)
prefix <- paste(colnames(Pheno_rust)[env],"_",sep="")
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx"))
View(G)
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 3"))
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 3", colNames = F))
View(G)
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
fm <- BGLR(y=Y[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
Pheno_rust[,3] <- as.numeric(Pheno_rust[,3])
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
Pheno_rust[,env] <- as.numeric(Pheno_rust[,env])
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
Pheno_rust[,env]
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T))
View(Pheno_rust)
env <- 3 # choose any number in 1:ncol(Y)
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 3", colNames = F))
prefix <- paste(colnames(Pheno_rust)[env],"_",sep="")
Pheno_rust[,env] <- as.numeric(Pheno_rust[,env])
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
class(G)
is.numeric(G)
is.numeric(Pheno_rust)
is.numeric(Pheno_rust[,env])
library(tidyverse)
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric)
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
Pheno_rust <- matrix(data=Pheno_rust, ncol=320, nrow=320)
View(Pheno_rust)
Pheno_rust <- as.matrix(read.table(file = "BLUP_GS_rust.txt", header = T))
Pheno_rust<- mapply(Pheno_rust, FUN=as.numeric)
Pheno_rust <- matrix(data=Pheno_rust, ncol=15, nrow=320)
View(Pheno_rust)
fm <- BGLR(y=Pheno_rust[,env],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
#Box 1b. Within-Environment (i.e., stratified) GBLUP (post-hoc)
# Extracting some estimates & predictions
fm$varE # residual variance
fm$ETA[[1]]$varU # genomic variance
fm$ETA[[1]]$u # genomic predictions
# Some trace plots
varE <- scan(paste(prefix,'varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU <- scan(paste(prefix,'ETA_1_varU.dat',sep=''))
plot(varU,type='o',cex=.5,col=4)
fm$ETA[[1]]$u # genomic predictions
fm$ETA[[1]]$varU # genomic variance
ETA_1_varU <- fm$ETA[[1]]$varU # genomic variance
varU <- scan(paste(prefix,ETA_1_varU,sep=''))
#Box 1b. Within-Environment (i.e., stratified) GBLUP (post-hoc)
# Extracting some estimates & predictions
fm$varE # residual variance
fm$ETA[[1]]$varU # genomic variance
R19 <- (Pheno_rust[,env]
cor(R19, fm$ETA[[1]]$u)
cor(R19, fm$ETA[[1]]$u)
R19 <- (Pheno_rust[,env]
R19 <- (Pheno_rust[,env]
R19 <- (Pheno_rust[,env])
cor(R19, fm$ETA[[1]]$u)
fm$ETA[[1]]$u # genomic predictions
prefix
# Some trace plots
varE <- scan(paste(prefix,'varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU <- scan(paste(prefix,'ETA_1_varU.dat',sep=''))
# Some trace plots
varE <- scan(paste(prefix,'R19_varE.dat',sep=''))
setwd("~/GitHub/Genomic-Selection/Genomic Selection_SALVA/data")
# Some trace plots
varE <- scan(paste(prefix,'R19_varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU <- scan(paste(prefix,'R19_ETA_G_varU.dat',sep=''))
# Some trace plots
varE <- scan(paste(prefix,'varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU <- scan(paste(prefix,'ETA_G_varU.dat',sep=''))
plot(varU,type='o',cex=.5,col=4)
R19 <- 3 # choose any number in 1:ncol(Pheno_rust)
G <- as.matrix(read.xlsx(xlsxFile = "GenPea_SilDArT_Kinship_rust.xlsx", sheet = "Sheet 3", colNames = F))
prefix <- paste(colnames(Pheno_rust)[R19],"_",sep="")
Pheno_rust[,R19] <- as.numeric(Pheno_rust[,R19])
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
R19 <- 3 # choose any number in 1:ncol(Pheno_rust)
AUDPC <- 5
IF <- 7
IT <- 8
DS <- 9
Index <- 14
#Box 2a. Across-Environment Model (model fitting)
env <- c(R19,AUDPC) # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
prefix <- paste(c('Across',colnames(Pheno_rust)[env],''),collapse='_')
y <- as.vector(Pheno_rust[,env])
# Fixed effect (env-intercepts)
envID <- rep(env,each=nrow(Pheno_rust))
ETA <- list(list(~factor(envID)-1,model="FIXED"))
# Effects of markers
G0 <- kronecker(matrix(nrow=nEnv,ncol=nEnv,1),G)
ETA[[2]] <- list(K=G0,model='RKHS')
# Model Fitting
fm <- BGLR(y=y,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
#Box 2b. Across-Environment Model (post-hoc)
# Extracting estimates of variance parameters
fm$varE # residual variance
fm$ETA[[2]]$varU # genomic variance
# Predictions (this is all within training)
tmpEnv <- 1
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
# Samples
varE <- scan(paste(prefix,'varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU0 <- scan(paste(prefix,'ETA_2_varU.dat',sep=''))
plot(varU0,type='o',cex=.5,col=4)
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
#Box 3a. Marker-by-Environment Interaction Model (model fitting)
env <- c(R19,AUDPC) # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
prefix <- paste(c('MxE',colnames(Pheno_rust)[env],''),collapse='_')
y <- as.vector(Pheno_rust[,env])
# Fixed effect (env-intercepts)
envID <- rep(env,each=nrow(Pheno_rust))
ETA <- list(list(~factor(envID)-1,model="FIXED"))
# Main effects of markers
G0 <- kronecker(matrix(nrow=nEnv,ncol=nEnv,1),G)
ETA[[2]] <- list(K=G0,model='RKHS')
# Adding interaction terms
for(i in 1:nEnv){
tmp <- rep(0,nEnv) ; tmp[i] <- 1
G1 <- kronecker(diag(tmp),G)
ETA[[(i+2)]] <- list(K=G1, model='RKHS')
}
nEnv
# Model Fitting
fm <- BGLR(y=y,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
#Box 3b. Marker-by-Environment Interaction Model (post-hoc)
# Extracting estimates of variance parameters
fm$varE # residual variance
fm$ETA[[2]]$varU # genomic variance (main effect)
vGInt <- rep(NA,nEnv)
for(i in 1:nEnv){ # interaction variances
vGInt[i] <- fm$ETA[[(i+2)]]$varU
}
vGInt
# Predictions (this is all within training)
tmpEnv <- 1
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
# Samples
varE <- scan(paste(prefix,'varE.dat',sep=''))
plot(varE,type='o',cex=.5,col=4)
varU0 <- scan(paste(prefix,'ETA_2_varU.dat',sep=''))
plot(varU0,type='o',cex=.5,col=4)
varU1 <- matrix(nrow=length(varU0),ncol=nEnv,NA)
for(i in 1:nEnv){
varU1[,i] <- scan(paste(prefix,'ETA_',i+2,'_varU.dat',sep=''))
}
tmpEnv <- 1
plot(varU1[,tmpEnv],type='o',col=4,cex=.5)
#Box 4a. Creating a Testing Sets for CV1
env <- c(R19,AUDPC) # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(Y)
percTST<-0.3
nTST <- round(percTST*n)
tst<-sample(1:n,size=nTST,replace=FALSE)
YNA <- Y
YNA[tst,]<-NA
#Box 4b. Creating a Testing Sets for CV2
env <- c(R19,AUDPC) # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
Y <- Pheno_rust[,env]
n <- nrow(Y)
percTST<-0.3
nTST <- round(percTST*n)
nNA <- nEnv*nTST
if(nNA<n){ indexNA <- sample(1:n,nNA,replace=FALSE) }
if(nNA>=n){
nRep <- floor(nNA/n)
remain <- sample(1:n,nNA%%n,replace=FALSE)
a0 <- sample(1:n,n,replace=FALSE)
indexNA <- rep(a0,nRep)
if(length(remain)>0){
a1 <- floor(length(indexNA)/nTST)*nTST
a2 <- nNA - a1 - length(remain)
bb <- sample(a0[!a0%in%remain],a2,replace=FALSE)
noInIndexNA <- c(rep(a0,nRep-1),a0[!a0%in%bb])
indexNA <- c(noInIndexNA,bb,remain)
}
}
indexEnv <- rep(1:nEnv,each=nTST)
YNA <- Y
for(j in 1:nEnv) YNA[indexNA[indexEnv==j],j] <- NA
#Box 5. Fitting Models to TRN-TST Partitions (continues from Box 4b)
## Single environments models #####################################
YHatSE <- matrix(nrow=nrow(Y),ncol=ncol(Y),NA)
ETA <- list(G=list(K=G,model='RKHS'))
for(i in 1:nEnv){
prefix <- paste(colnames(Y)[i],"_",sep="")
fm <-BGLR(y=YNA[,i],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
YHatSE[,i] <- fm$yHat
}
## Across environment model (ignoring GxE) #######################
yNA <- as.vector(YNA)
# Fixed effect (env-intercepts)
envID <- rep(env,each=nrow(Y))
ETA <- list(list(~factor(envID)-1,model="FIXED"))
# Main effects of markers
G0 <- kronecker(matrix(nrow=nEnv,ncol=nEnv,1),G)
ETA[[2]] <- list(K=G0,model='RKHS')
# Model Fitting
prefix <- paste(c('Across',colnames(Y),''),collapse='_')
fm <- BGLR(y=yNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
YHatAcross <- matrix(fm$yHat,ncol=nEnv)
## MxE Interaction Model #########################################
# Adding interaction terms
for(i in 1:nEnv){
tmp <- rep(0,nEnv) ; tmp[i] <- 1; G1 <- kronecker(diag(tmp),G)
ETA[[(i+2)]] <- list(K=G1,model='RKHS')
}
# Model Fitting
prefix <- paste(c('MxE',colnames(Y),''),collapse='_')
fm <- BGLR(y=yNA,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
YHatInt <- matrix(fm$yHat,ncol=nEnv)
YHatAcross
plot(YHatAcross)
cor(YHatAcross)
plot(YHatAcross)
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
plot(YHatInt)
cor(YHatInt)
plot(YHatSE)
cor(YHatSE)
env <- c(R19,AUDPC) # choose any set of environments from 1:ncol(Y)
nEnv <- length(env)
prefix <- paste(c('MxE',colnames(Pheno_rust)[env],''),collapse='_')
y <- as.vector(Pheno_rust[,env])
# Fixed effect (env-intercepts)
envID <- rep(env,each=nrow(Pheno_rust))
ETA <- list(list(~factor(envID)-1,model="FIXED"))
# Main effects of markers
G0 <- kronecker(matrix(nrow=nEnv,ncol=nEnv,1),G)
ETA[[2]] <- list(K=G0,model='RKHS')
# Adding interaction terms
for(i in 1:nEnv){
tmp <- rep(0,nEnv) ; tmp[i] <- 1
G1 <- kronecker(diag(tmp),G)
ETA[[(i+2)]] <- list(K=G1, model='RKHS')
}
# Model Fitting
fm <- BGLR(y=y,ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
#Box 3b. Marker-by-Environment Interaction Model (post-hoc)
# Extracting estimates of variance parameters
fm$varE # residual variance
fm$ETA[[2]]$varU # genomic variance (main effect)
vGInt <- rep(NA,nEnv)
for(i in 1:nEnv){ # interaction variances
vGInt[i] <- fm$ETA[[(i+2)]]$varU
}
vGInt
# Predictions (this is all within training)
tmpEnv <- 1
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
y[envID==env[tmpEnv]]
(Pheno_rust)[env]
Pheno_rust[,env]
fm$yHat[envID==env[tmpEnv]]
# Predictions (this is all within training)
tmpEnv <- 2
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
# Fixed effect (env-intercepts)
envID <- rep(env,each=nrow(Pheno_rust))
ETA <- list(list(~factor(envID)-1,model="FIXED"))
# Main effects of markers
G0 <- kronecker(matrix(nrow=nEnv,ncol=nEnv,1),G)
ETA[[2]] <- list(K=G0,model='RKHS')
# Adding interaction terms
for(i in 1:nEnv){
tmp <- rep(0,nEnv) ; tmp[i] <- 1
G1 <- kronecker(diag(tmp),G)
ETA[[(i+2)]] <- list(K=G1, model='RKHS')
}
# same with loop:
folds=sample(1:10,size=n,replace=T)
yHatCV=rep(NA,n)
timeIn=proc.time()[3]
for(i in 1:max(folds)){
tst=which(folds==i)
yNA=y
yNA[tst]=NA
fm=BGLR(y=yNA,ETA=ETA,nIter=6000,burnIn=1000)
yHatCV[tst]=fm$yHat[tst]
}
proc.time()[3]-timeIn
yHatCV
#Box 3b. Marker-by-Environment Interaction Model (post-hoc)
# Extracting estimates of variance parameters
fm$varE # residual variance
fm$ETA[[2]]$varU # genomic variance (main effect)
vGInt <- rep(NA,nEnv)
for(i in 1:nEnv){ # interaction variances
vGInt[i] <- fm$ETA[[(i+2)]]$varU
}
vGInt
# Predictions (this is all within training)
tmpEnv <- 2
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
# Predictions (this is all within training)
tmpEnv <- 1
plot(y[envID==env[tmpEnv]]~fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],fm$yHat[envID==env[tmpEnv]])
cor(y[envID==env[tmpEnv]],yHatCV)
plot(y[envID==env[tmpEnv]]~yHatCV)
View(fm)
folds=sample(1:5,size=n,replace=T)
yHatCV=rep(NA,n)
# Fitting the model
ETA <- list(G=list(K=G,model='RKHS'))
folds=sample(1:5,size=n,replace=T)
yHatCV=rep(NA,n)
timeIn=proc.time()[3]
for(i in 1:max(folds)){
tst=which(folds==i)
yNA=y
yNA[tst]=NA
fm=BGLR(y=yNA,ETA=ETA,nIter=6000,burnIn=1000)
yHatCV[tst]=fm$yHat[tst]
}
ETA <- list(G=list(K=G,model='RKHS'))
fm_R19 <- BGLR(y=Pheno_rust[,R19],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
fm_AUDPC <- BGLR(y=Pheno_rust[,AUDPC],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
fm_IT <- BGLR(y=Pheno_rust[,IT],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
fm_DS <- BGLR(y=Pheno_rust[,DS],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
fm_Index <- BGLR(y=Pheno_rust[,Index],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
#Box 1b. Within-R19environment (i.e., stratified) GBLUP (post-hoc)
# Extracting some estimates & predictions
fm_R19$varE # residual variance
fm_R19$ETA[[1]]$varU # genomic variance
cor(Pheno_rust[,R19], fm_R19$ETA[[1]]$u) #Predictive ability
# Extracting some estimates & predictions in AUDPC
fm_AUDPC$varE # residual variance
fm_AUDPC$ETA[[1]]$varU # genomic variance
cor(Pheno_rust[,AUDPC], fm_AUDPC$ETA[[1]]$u) #Predictive ability
# Extracting some estimates & predictions in IT
fm_IT$varE # residual variance
fm_IT$ETA[[1]]$varU # genomic variance
cor(Pheno_rust[,IT], fm_IT$ETA[[1]]$u) #Predictive ability
# Extracting some estimates & predictions in DS
fm_DS$varE # residual variance
fm_DS$ETA[[1]]$varU # genomic variance
cor(Pheno_rust[,DS], fm_DS$ETA[[1]]$u) #Predictive ability
# Extracting some estimates & predictions in Index
fm_Index$varE # residual variance
fm_Index$ETA[[1]]$varU # genomic variance
cor(Pheno_rust[,Index], fm_Index$ETA[[1]]$u) #Predictive ability
cor(Pheno_rust[,R19], fm_R19$ETA[[1]]$u) #Predictive ability
cor(Pheno_rust[,AUDPC], fm_AUDPC$ETA[[1]]$u) #Predictive ability
cor(Pheno_rust[,IT], fm_IT$ETA[[1]]$u) #Predictive ability
cor(Pheno_rust[,DS], fm_DS$ETA[[1]]$u) #Predictive ability
cor(Pheno_rust[,Index], fm_Index$ETA[[1]]$u) #Predictive ability
fm_IF <- BGLR(y=Pheno_rust[,IF],ETA=ETA,nIter=12000,burnIn=2000,saveAt=prefix)
cor(Pheno_rust[,IF], fm_IF$ETA[[1]]$u) #Predictive ability
0.885+0.858+0.921+0.889+0.912+0.882
5.347/6
